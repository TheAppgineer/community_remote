// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -2102101347;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__simple__browse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "browse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_category = <i32>::sse_decode(&mut deserializer);
            let api_session_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::browse(api_category, api_session_id).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__browse_back_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "browse_back",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_session_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::browse_back(api_session_id).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__browse_next_page_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "browse_next_page",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::browse_next_page().await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__browse_with_input_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "browse_with_input",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_category = <i32>::sse_decode(&mut deserializer);
            let api_session_id = <i32>::sse_decode(&mut deserializer);
            let api_input = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::browse_with_input(
                                api_category,
                                api_session_id,
                                api_input,
                            )
                            .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__change_volume_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "change_volume",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_output_id = <String>::sse_decode(&mut deserializer);
            let api_how =
                <crate::api::roon_transport_mirror::ChangeMode>::sse_decode(&mut deserializer);
            let api_value = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::change_volume(api_output_id, api_how, api_value)
                                .await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__change_zone_volume_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "change_zone_volume",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_how =
                <crate::api::roon_transport_mirror::ChangeMode>::sse_decode(&mut deserializer);
            let api_value = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::change_zone_volume(&api_how, api_value).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__control_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "control",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_control =
                <crate::api::roon_transport_mirror::Control>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::control(api_control).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__control_by_zone_id_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "control_by_zone_id",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_zone_id = <String>::sse_decode(&mut deserializer);
            let api_control =
                <crate::api::roon_transport_mirror::Control>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::control_by_zone_id(api_zone_id, api_control).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__get_image_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_image",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_image_key = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::get_image(api_image_key).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__group_outputs_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "group_outputs",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_output_ids = <Vec<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::group_outputs(api_output_ids).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::init_app().await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__mute_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mute",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_output_id = <String>::sse_decode(&mut deserializer);
            let api_how = <crate::api::roon_transport_mirror::Mute>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::mute(api_output_id, api_how).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__mute_all_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mute_all",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::mute_all().await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__mute_zone_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mute_zone",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::mute_zone().await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__pause_after_queue_items_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "pause_after_queue_items",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_queue_item_ids = <Vec<u32>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::pause_after_queue_items(api_queue_item_ids).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__pause_all_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "pause_all",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::pause_all().await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__pause_on_track_end_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "pause_on_track_end",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::pause_on_track_end().await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__query_profile_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "query_profile",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_session_id = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::query_profile(api_session_id).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__save_settings_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "save_settings",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_settings = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::save_settings(api_settings).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__search_artist_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "search_artist",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_session_id = <i32>::sse_decode(&mut deserializer);
            let api_artist = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::search_artist(api_session_id, api_artist).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__select_browse_item_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "select_browse_item",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_session_id = <i32>::sse_decode(&mut deserializer);
            let api_item =
                <crate::api::roon_browse_mirror::BrowseItem>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::select_browse_item(api_session_id, api_item).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__select_queue_item_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "select_queue_item",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_queue_item_id = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::select_queue_item(api_queue_item_id).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__select_zone_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "select_zone",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_zone_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::select_zone(api_zone_id).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__set_server_properties_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_server_properties",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_ip = <String>::sse_decode(&mut deserializer);
            let api_port = <Option<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::set_server_properties(api_ip, api_port).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__standby_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "standby",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_output_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::standby(api_output_id).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__start_roon_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start_roon",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_support_path = <String>::sse_decode(&mut deserializer);
            let api_cb = decode_DartFn_Inputs_roon_event_Output_unit_AnyhowException(
                <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer),
            );
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::simple::start_roon(api_support_path, api_cb).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__simple__transfer_from_zone_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "transfer_from_zone",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_zone_id = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok({
                            crate::api::simple::transfer_from_zone(api_zone_id).await;
                        })?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let BrowseItem = None::<crate::api::roon_browse_mirror::BrowseItem>.unwrap();
        let _: String = BrowseItem.title;
        let _: Option<String> = BrowseItem.subtitle;
        let _: Option<String> = BrowseItem.image_key;
        let _: Option<String> = BrowseItem.item_key;
        let _: Option<crate::api::roon_browse_mirror::BrowseItemHint> = BrowseItem.hint;
        let _: Option<crate::api::roon_browse_mirror::InputPrompt> = BrowseItem.input_prompt;
    }
    {
        let BrowseList = None::<crate::api::roon_browse_mirror::BrowseList>.unwrap();
        let _: String = BrowseList.title;
        let _: usize = BrowseList.count;
        let _: u32 = BrowseList.level;
        let _: Option<String> = BrowseList.subtitle;
        let _: Option<String> = BrowseList.image_key;
        let _: Option<usize> = BrowseList.display_offset;
        let _: Option<crate::api::roon_browse_mirror::BrowseListHint> = BrowseList.hint;
    }
    {
        let InputPrompt = None::<crate::api::roon_browse_mirror::InputPrompt>.unwrap();
        let _: String = InputPrompt.prompt;
        let _: String = InputPrompt.action;
        let _: Option<String> = InputPrompt.value;
        let _: Option<bool> = InputPrompt.is_password;
    }
    {
        let NowPlaying = None::<crate::api::roon_transport_mirror::NowPlaying>.unwrap();
        let _: Option<Vec<String>> = NowPlaying.artist_image_keys;
        let _: Option<String> = NowPlaying.image_key;
        let _: Option<u32> = NowPlaying.length;
        let _: Option<i64> = NowPlaying.seek_position;
        let _: crate::api::roon_transport_mirror::OneLine = NowPlaying.one_line;
        let _: crate::api::roon_transport_mirror::TwoLine = NowPlaying.two_line;
        let _: crate::api::roon_transport_mirror::ThreeLine = NowPlaying.three_line;
    }
    {
        let OneLine = None::<crate::api::roon_transport_mirror::OneLine>.unwrap();
        let _: String = OneLine.line1;
    }
    {
        let Output = None::<crate::api::roon_transport_mirror::Output>.unwrap();
        let _: String = Output.output_id;
        let _: String = Output.zone_id;
        let _: Vec<String> = Output.can_group_with_output_ids;
        let _: String = Output.display_name;
        let _: Option<crate::api::roon_transport_mirror::Volume> = Output.volume;
        let _: Option<Vec<crate::api::roon_transport_mirror::SourceControls>> =
            Output.source_controls;
    }
    {
        let QueueItem = None::<crate::api::roon_transport_mirror::QueueItem>.unwrap();
        let _: Option<String> = QueueItem.image_key;
        let _: u32 = QueueItem.length;
        let _: u32 = QueueItem.queue_item_id;
        let _: crate::api::roon_transport_mirror::OneLine = QueueItem.one_line;
        let _: crate::api::roon_transport_mirror::TwoLine = QueueItem.two_line;
        let _: crate::api::roon_transport_mirror::ThreeLine = QueueItem.three_line;
    }
    {
        let SourceControls = None::<crate::api::roon_transport_mirror::SourceControls>.unwrap();
        let _: String = SourceControls.control_key;
        let _: String = SourceControls.display_name;
        let _: bool = SourceControls.supports_standby;
        let _: crate::api::roon_transport_mirror::Status = SourceControls.status;
    }
    {
        let ThreeLine = None::<crate::api::roon_transport_mirror::ThreeLine>.unwrap();
        let _: String = ThreeLine.line1;
        let _: String = ThreeLine.line2;
        let _: String = ThreeLine.line3;
    }
    {
        let TwoLine = None::<crate::api::roon_transport_mirror::TwoLine>.unwrap();
        let _: String = TwoLine.line1;
        let _: String = TwoLine.line2;
    }
    {
        let Volume = None::<crate::api::roon_transport_mirror::Volume>.unwrap();
        let _: crate::api::roon_transport_mirror::Scale = Volume.scale;
        let _: Option<f32> = Volume.min;
        let _: Option<f32> = Volume.max;
        let _: Option<f32> = Volume.value;
        let _: Option<f32> = Volume.step;
        let _: Option<bool> = Volume.is_muted;
        let _: f32 = Volume.hard_limit_min;
        let _: f32 = Volume.hard_limit_max;
        let _: f32 = Volume.soft_limit;
    }
    {
        let Zone = None::<crate::api::roon_transport_mirror::Zone>.unwrap();
        let _: String = Zone.zone_id;
        let _: String = Zone.display_name;
        let _: Vec<crate::api::roon_transport_mirror::Output> = Zone.outputs;
        let _: crate::api::roon_transport_mirror::PlayState = Zone.state;
        let _: bool = Zone.is_next_allowed;
        let _: bool = Zone.is_previous_allowed;
        let _: bool = Zone.is_pause_allowed;
        let _: bool = Zone.is_play_allowed;
        let _: bool = Zone.is_seek_allowed;
        let _: i64 = Zone.queue_items_remaining;
        let _: i64 = Zone.queue_time_remaining;
        let _: Option<crate::api::roon_transport_mirror::NowPlaying> = Zone.now_playing;
        let _: crate::api::roon_transport_mirror::ZoneSettings = Zone.settings;
    }
    {
        let ZoneSeek = None::<crate::api::roon_transport_mirror::ZoneSeek>.unwrap();
        let _: String = ZoneSeek.zone_id;
        let _: i64 = ZoneSeek.queue_time_remaining;
        let _: Option<i64> = ZoneSeek.seek_position;
    }
    {
        let ZoneSettings = None::<crate::api::roon_transport_mirror::ZoneSettings>.unwrap();
        let _: crate::api::roon_transport_mirror::Repeat = ZoneSettings.repeat;
        let _: bool = ZoneSettings.shuffle;
        let _: bool = ZoneSettings.auto_radio;
    }
};

// Section: related_funcs

fn decode_DartFn_Inputs_roon_event_Output_unit_AnyhowException(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(crate::api::simple::RoonEvent) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: crate::api::simple::RoonEvent,
    ) -> () {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;

        let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
        let action = deserializer.cursor.read_u8().unwrap();
        let ans = match action {
            0 => std::result::Result::Ok(<()>::sse_decode(&mut deserializer)),
            1 => std::result::Result::Err(
                <flutter_rust_bridge::for_generated::anyhow::Error>::sse_decode(&mut deserializer),
            ),
            _ => unreachable!(),
        };
        deserializer.end();
        let ans = ans.expect("Dart throws exception but Rust side assume it is not failable");
        ans
    }

    move |arg0: crate::api::simple::RoonEvent| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::roon_browse_mirror::BrowseItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_subtitle = <Option<String>>::sse_decode(deserializer);
        let mut var_imageKey = <Option<String>>::sse_decode(deserializer);
        let mut var_itemKey = <Option<String>>::sse_decode(deserializer);
        let mut var_hint =
            <Option<crate::api::roon_browse_mirror::BrowseItemHint>>::sse_decode(deserializer);
        let mut var_inputPrompt =
            <Option<crate::api::roon_browse_mirror::InputPrompt>>::sse_decode(deserializer);
        return crate::api::roon_browse_mirror::BrowseItem {
            title: var_title,
            subtitle: var_subtitle,
            image_key: var_imageKey,
            item_key: var_itemKey,
            hint: var_hint,
            input_prompt: var_inputPrompt,
        };
    }
}

impl SseDecode for crate::api::roon_browse_mirror::BrowseItemHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::roon_browse_mirror::BrowseItemHint::None,
            1 => crate::api::roon_browse_mirror::BrowseItemHint::Action,
            2 => crate::api::roon_browse_mirror::BrowseItemHint::ActionList,
            3 => crate::api::roon_browse_mirror::BrowseItemHint::List,
            4 => crate::api::roon_browse_mirror::BrowseItemHint::Header,
            _ => unreachable!("Invalid variant for BrowseItemHint: {}", inner),
        };
    }
}

impl SseDecode for crate::api::simple::BrowseItems {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_list = <crate::api::roon_browse_mirror::BrowseList>::sse_decode(deserializer);
        let mut var_offset = <u32>::sse_decode(deserializer);
        let mut var_items =
            <Vec<crate::api::roon_browse_mirror::BrowseItem>>::sse_decode(deserializer);
        return crate::api::simple::BrowseItems {
            list: var_list,
            offset: var_offset,
            items: var_items,
        };
    }
}

impl SseDecode for crate::api::roon_browse_mirror::BrowseList {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_title = <String>::sse_decode(deserializer);
        let mut var_count = <usize>::sse_decode(deserializer);
        let mut var_level = <u32>::sse_decode(deserializer);
        let mut var_subtitle = <Option<String>>::sse_decode(deserializer);
        let mut var_imageKey = <Option<String>>::sse_decode(deserializer);
        let mut var_displayOffset = <Option<usize>>::sse_decode(deserializer);
        let mut var_hint =
            <Option<crate::api::roon_browse_mirror::BrowseListHint>>::sse_decode(deserializer);
        return crate::api::roon_browse_mirror::BrowseList {
            title: var_title,
            count: var_count,
            level: var_level,
            subtitle: var_subtitle,
            image_key: var_imageKey,
            display_offset: var_displayOffset,
            hint: var_hint,
        };
    }
}

impl SseDecode for crate::api::roon_browse_mirror::BrowseListHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::roon_browse_mirror::BrowseListHint::None,
            1 => crate::api::roon_browse_mirror::BrowseListHint::ActionList,
            _ => unreachable!("Invalid variant for BrowseListHint: {}", inner),
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::ChangeMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::roon_transport_mirror::ChangeMode::Absolute,
            1 => crate::api::roon_transport_mirror::ChangeMode::Relative,
            2 => crate::api::roon_transport_mirror::ChangeMode::RelativeStep,
            _ => unreachable!("Invalid variant for ChangeMode: {}", inner),
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::Control {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::roon_transport_mirror::Control::Play,
            1 => crate::api::roon_transport_mirror::Control::Pause,
            2 => crate::api::roon_transport_mirror::Control::PlayPause,
            3 => crate::api::roon_transport_mirror::Control::Stop,
            4 => crate::api::roon_transport_mirror::Control::Previous,
            5 => crate::api::roon_transport_mirror::Control::Next,
            _ => unreachable!("Invalid variant for Control: {}", inner),
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::api::simple::ImageKeyValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_imageKey = <String>::sse_decode(deserializer);
        let mut var_image = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::simple::ImageKeyValue {
            image_key: var_imageKey,
            image: var_image,
        };
    }
}

impl SseDecode for crate::api::roon_browse_mirror::InputPrompt {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_prompt = <String>::sse_decode(deserializer);
        let mut var_action = <String>::sse_decode(deserializer);
        let mut var_value = <Option<String>>::sse_decode(deserializer);
        let mut var_isPassword = <Option<bool>>::sse_decode(deserializer);
        return crate::api::roon_browse_mirror::InputPrompt {
            prompt: var_prompt,
            action: var_action,
            value: var_value,
            is_password: var_isPassword,
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::roon_browse_mirror::BrowseItem> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::roon_browse_mirror::BrowseItem>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::roon_transport_mirror::Output> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::roon_transport_mirror::Output>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::roon_transport_mirror::QueueItem> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::roon_transport_mirror::QueueItem>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::roon_transport_mirror::SourceControls> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::roon_transport_mirror::SourceControls>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::simple::ZoneSummary> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::simple::ZoneSummary>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::roon_transport_mirror::Mute {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::roon_transport_mirror::Mute::Mute,
            1 => crate::api::roon_transport_mirror::Mute::Unmute,
            _ => unreachable!("Invalid variant for Mute: {}", inner),
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::NowPlaying {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_artistImageKeys = <Option<Vec<String>>>::sse_decode(deserializer);
        let mut var_imageKey = <Option<String>>::sse_decode(deserializer);
        let mut var_length = <Option<u32>>::sse_decode(deserializer);
        let mut var_seekPosition = <Option<i64>>::sse_decode(deserializer);
        let mut var_oneLine =
            <crate::api::roon_transport_mirror::OneLine>::sse_decode(deserializer);
        let mut var_twoLine =
            <crate::api::roon_transport_mirror::TwoLine>::sse_decode(deserializer);
        let mut var_threeLine =
            <crate::api::roon_transport_mirror::ThreeLine>::sse_decode(deserializer);
        return crate::api::roon_transport_mirror::NowPlaying {
            artist_image_keys: var_artistImageKeys,
            image_key: var_imageKey,
            length: var_length,
            seek_position: var_seekPosition,
            one_line: var_oneLine,
            two_line: var_twoLine,
            three_line: var_threeLine,
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::OneLine {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_line1 = <String>::sse_decode(deserializer);
        return crate::api::roon_transport_mirror::OneLine { line1: var_line1 };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::roon_browse_mirror::BrowseItemHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::roon_browse_mirror::BrowseItemHint>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::roon_browse_mirror::BrowseListHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::roon_browse_mirror::BrowseListHint>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::roon_browse_mirror::InputPrompt> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::roon_browse_mirror::InputPrompt>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::roon_transport_mirror::NowPlaying> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::roon_transport_mirror::NowPlaying>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::roon_transport_mirror::Volume> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::roon_transport_mirror::Volume>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::roon_transport_mirror::Zone> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::roon_transport_mirror::Zone>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::roon_transport_mirror::SourceControls>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <Vec<crate::api::roon_transport_mirror::SourceControls>>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::roon_transport_mirror::Output {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_outputId = <String>::sse_decode(deserializer);
        let mut var_zoneId = <String>::sse_decode(deserializer);
        let mut var_canGroupWithOutputIds = <Vec<String>>::sse_decode(deserializer);
        let mut var_displayName = <String>::sse_decode(deserializer);
        let mut var_volume =
            <Option<crate::api::roon_transport_mirror::Volume>>::sse_decode(deserializer);
        let mut var_sourceControls =
            <Option<Vec<crate::api::roon_transport_mirror::SourceControls>>>::sse_decode(
                deserializer,
            );
        return crate::api::roon_transport_mirror::Output {
            output_id: var_outputId,
            zone_id: var_zoneId,
            can_group_with_output_ids: var_canGroupWithOutputIds,
            display_name: var_displayName,
            volume: var_volume,
            source_controls: var_sourceControls,
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::PlayState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::roon_transport_mirror::PlayState::Playing,
            1 => crate::api::roon_transport_mirror::PlayState::Paused,
            2 => crate::api::roon_transport_mirror::PlayState::Loading,
            3 => crate::api::roon_transport_mirror::PlayState::Stopped,
            _ => unreachable!("Invalid variant for PlayState: {}", inner),
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::QueueItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_imageKey = <Option<String>>::sse_decode(deserializer);
        let mut var_length = <u32>::sse_decode(deserializer);
        let mut var_queueItemId = <u32>::sse_decode(deserializer);
        let mut var_oneLine =
            <crate::api::roon_transport_mirror::OneLine>::sse_decode(deserializer);
        let mut var_twoLine =
            <crate::api::roon_transport_mirror::TwoLine>::sse_decode(deserializer);
        let mut var_threeLine =
            <crate::api::roon_transport_mirror::ThreeLine>::sse_decode(deserializer);
        return crate::api::roon_transport_mirror::QueueItem {
            image_key: var_imageKey,
            length: var_length,
            queue_item_id: var_queueItemId,
            one_line: var_oneLine,
            two_line: var_twoLine,
            three_line: var_threeLine,
        };
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::roon_transport_mirror::Repeat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::roon_transport_mirror::Repeat::Off,
            1 => crate::api::roon_transport_mirror::Repeat::All,
            2 => crate::api::roon_transport_mirror::Repeat::One,
            _ => unreachable!("Invalid variant for Repeat: {}", inner),
        };
    }
}

impl SseDecode for crate::api::simple::RoonEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::CoreFound(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::CoreLost(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <Vec<crate::api::simple::ZoneSummary>>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::ZonesChanged(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <Option<crate::api::roon_transport_mirror::Zone>>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::ZoneChanged(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <crate::api::roon_transport_mirror::ZoneSeek>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::ZoneSeek(var_field0);
            }
            5 => {
                let mut var_field0 =
                    <std::collections::HashMap<String, String>>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::OutputsChanged(var_field0);
            }
            6 => {
                let mut var_field0 = <crate::api::simple::BrowseItems>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::BrowseItems(var_field0);
            }
            7 => {
                let mut var_field0 =
                    <Vec<crate::api::roon_browse_mirror::BrowseItem>>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::BrowseActions(var_field0);
            }
            8 => {
                return crate::api::simple::RoonEvent::BrowseReset;
            }
            9 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::Profile(var_field0);
            }
            10 => {
                let mut var_field0 =
                    <Vec<crate::api::roon_transport_mirror::QueueItem>>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::QueueItems(var_field0);
            }
            11 => {
                let mut var_field0 = <bool>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::PauseOnTrackEnd(var_field0);
            }
            12 => {
                let mut var_field0 = <crate::api::simple::ImageKeyValue>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::Image(var_field0);
            }
            13 => {
                return crate::api::simple::RoonEvent::SettingsSaved;
            }
            14 => {
                let mut var_field0 = <Vec<String>>::sse_decode(deserializer);
                return crate::api::simple::RoonEvent::Services(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::roon_transport_mirror::Scale {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::roon_transport_mirror::Scale::Number,
            1 => crate::api::roon_transport_mirror::Scale::Decibel,
            2 => crate::api::roon_transport_mirror::Scale::Incremental,
            _ => unreachable!("Invalid variant for Scale: {}", inner),
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::SourceControls {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_controlKey = <String>::sse_decode(deserializer);
        let mut var_displayName = <String>::sse_decode(deserializer);
        let mut var_supportsStandby = <bool>::sse_decode(deserializer);
        let mut var_status = <crate::api::roon_transport_mirror::Status>::sse_decode(deserializer);
        return crate::api::roon_transport_mirror::SourceControls {
            control_key: var_controlKey,
            display_name: var_displayName,
            supports_standby: var_supportsStandby,
            status: var_status,
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::Status {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::roon_transport_mirror::Status::Selected,
            1 => crate::api::roon_transport_mirror::Status::Deselected,
            2 => crate::api::roon_transport_mirror::Status::Standby,
            3 => crate::api::roon_transport_mirror::Status::Indeterminate,
            _ => unreachable!("Invalid variant for Status: {}", inner),
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::ThreeLine {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_line1 = <String>::sse_decode(deserializer);
        let mut var_line2 = <String>::sse_decode(deserializer);
        let mut var_line3 = <String>::sse_decode(deserializer);
        return crate::api::roon_transport_mirror::ThreeLine {
            line1: var_line1,
            line2: var_line2,
            line3: var_line3,
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::TwoLine {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_line1 = <String>::sse_decode(deserializer);
        let mut var_line2 = <String>::sse_decode(deserializer);
        return crate::api::roon_transport_mirror::TwoLine {
            line1: var_line1,
            line2: var_line2,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::api::roon_transport_mirror::Volume {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_scale = <crate::api::roon_transport_mirror::Scale>::sse_decode(deserializer);
        let mut var_min = <Option<f32>>::sse_decode(deserializer);
        let mut var_max = <Option<f32>>::sse_decode(deserializer);
        let mut var_value = <Option<f32>>::sse_decode(deserializer);
        let mut var_step = <Option<f32>>::sse_decode(deserializer);
        let mut var_isMuted = <Option<bool>>::sse_decode(deserializer);
        let mut var_hardLimitMin = <f32>::sse_decode(deserializer);
        let mut var_hardLimitMax = <f32>::sse_decode(deserializer);
        let mut var_softLimit = <f32>::sse_decode(deserializer);
        return crate::api::roon_transport_mirror::Volume {
            scale: var_scale,
            min: var_min,
            max: var_max,
            value: var_value,
            step: var_step,
            is_muted: var_isMuted,
            hard_limit_min: var_hardLimitMin,
            hard_limit_max: var_hardLimitMax,
            soft_limit: var_softLimit,
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::Zone {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_zoneId = <String>::sse_decode(deserializer);
        let mut var_displayName = <String>::sse_decode(deserializer);
        let mut var_outputs =
            <Vec<crate::api::roon_transport_mirror::Output>>::sse_decode(deserializer);
        let mut var_state =
            <crate::api::roon_transport_mirror::PlayState>::sse_decode(deserializer);
        let mut var_isNextAllowed = <bool>::sse_decode(deserializer);
        let mut var_isPreviousAllowed = <bool>::sse_decode(deserializer);
        let mut var_isPauseAllowed = <bool>::sse_decode(deserializer);
        let mut var_isPlayAllowed = <bool>::sse_decode(deserializer);
        let mut var_isSeekAllowed = <bool>::sse_decode(deserializer);
        let mut var_queueItemsRemaining = <i64>::sse_decode(deserializer);
        let mut var_queueTimeRemaining = <i64>::sse_decode(deserializer);
        let mut var_nowPlaying =
            <Option<crate::api::roon_transport_mirror::NowPlaying>>::sse_decode(deserializer);
        let mut var_settings =
            <crate::api::roon_transport_mirror::ZoneSettings>::sse_decode(deserializer);
        return crate::api::roon_transport_mirror::Zone {
            zone_id: var_zoneId,
            display_name: var_displayName,
            outputs: var_outputs,
            state: var_state,
            is_next_allowed: var_isNextAllowed,
            is_previous_allowed: var_isPreviousAllowed,
            is_pause_allowed: var_isPauseAllowed,
            is_play_allowed: var_isPlayAllowed,
            is_seek_allowed: var_isSeekAllowed,
            queue_items_remaining: var_queueItemsRemaining,
            queue_time_remaining: var_queueTimeRemaining,
            now_playing: var_nowPlaying,
            settings: var_settings,
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::ZoneSeek {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_zoneId = <String>::sse_decode(deserializer);
        let mut var_queueTimeRemaining = <i64>::sse_decode(deserializer);
        let mut var_seekPosition = <Option<i64>>::sse_decode(deserializer);
        return crate::api::roon_transport_mirror::ZoneSeek {
            zone_id: var_zoneId,
            queue_time_remaining: var_queueTimeRemaining,
            seek_position: var_seekPosition,
        };
    }
}

impl SseDecode for crate::api::roon_transport_mirror::ZoneSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_repeat = <crate::api::roon_transport_mirror::Repeat>::sse_decode(deserializer);
        let mut var_shuffle = <bool>::sse_decode(deserializer);
        let mut var_autoRadio = <bool>::sse_decode(deserializer);
        return crate::api::roon_transport_mirror::ZoneSettings {
            repeat: var_repeat,
            shuffle: var_shuffle,
            auto_radio: var_autoRadio,
        };
    }
}

impl SseDecode for crate::api::simple::ZoneSummary {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_zoneId = <String>::sse_decode(deserializer);
        let mut var_outputIds = <Vec<String>>::sse_decode(deserializer);
        let mut var_displayName = <String>::sse_decode(deserializer);
        let mut var_state =
            <crate::api::roon_transport_mirror::PlayState>::sse_decode(deserializer);
        let mut var_nowPlaying = <Option<String>>::sse_decode(deserializer);
        let mut var_imageKey = <Option<String>>::sse_decode(deserializer);
        return crate::api::simple::ZoneSummary {
            zone_id: var_zoneId,
            output_ids: var_outputIds,
            display_name: var_displayName,
            state: var_state,
            now_playing: var_nowPlaying,
            image_key: var_imageKey,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__simple__browse_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__simple__browse_back_impl(port, ptr, rust_vec_len, data_len),
        3 => wire__crate__api__simple__browse_next_page_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__simple__browse_with_input_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__simple__change_volume_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__simple__change_zone_volume_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__simple__control_impl(port, ptr, rust_vec_len, data_len),
        8 => wire__crate__api__simple__control_by_zone_id_impl(port, ptr, rust_vec_len, data_len),
        9 => wire__crate__api__simple__get_image_impl(port, ptr, rust_vec_len, data_len),
        10 => wire__crate__api__simple__group_outputs_impl(port, ptr, rust_vec_len, data_len),
        11 => wire__crate__api__simple__init_app_impl(port, ptr, rust_vec_len, data_len),
        12 => wire__crate__api__simple__mute_impl(port, ptr, rust_vec_len, data_len),
        13 => wire__crate__api__simple__mute_all_impl(port, ptr, rust_vec_len, data_len),
        14 => wire__crate__api__simple__mute_zone_impl(port, ptr, rust_vec_len, data_len),
        15 => wire__crate__api__simple__pause_after_queue_items_impl(
            port,
            ptr,
            rust_vec_len,
            data_len,
        ),
        16 => wire__crate__api__simple__pause_all_impl(port, ptr, rust_vec_len, data_len),
        17 => wire__crate__api__simple__pause_on_track_end_impl(port, ptr, rust_vec_len, data_len),
        18 => wire__crate__api__simple__query_profile_impl(port, ptr, rust_vec_len, data_len),
        19 => wire__crate__api__simple__save_settings_impl(port, ptr, rust_vec_len, data_len),
        20 => wire__crate__api__simple__search_artist_impl(port, ptr, rust_vec_len, data_len),
        21 => wire__crate__api__simple__select_browse_item_impl(port, ptr, rust_vec_len, data_len),
        22 => wire__crate__api__simple__select_queue_item_impl(port, ptr, rust_vec_len, data_len),
        23 => wire__crate__api__simple__select_zone_impl(port, ptr, rust_vec_len, data_len),
        24 => {
            wire__crate__api__simple__set_server_properties_impl(port, ptr, rust_vec_len, data_len)
        }
        25 => wire__crate__api__simple__standby_impl(port, ptr, rust_vec_len, data_len),
        26 => wire__crate__api__simple__start_roon_impl(port, ptr, rust_vec_len, data_len),
        27 => wire__crate__api__simple__transfer_from_zone_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_browse_mirror::BrowseItem> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.title.into_into_dart().into_dart(),
            self.0.subtitle.into_into_dart().into_dart(),
            self.0.image_key.into_into_dart().into_dart(),
            self.0.item_key.into_into_dart().into_dart(),
            self.0.hint.into_into_dart().into_dart(),
            self.0.input_prompt.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_browse_mirror::BrowseItem>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_browse_mirror::BrowseItem>>
    for crate::api::roon_browse_mirror::BrowseItem
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_browse_mirror::BrowseItem> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_browse_mirror::BrowseItemHint> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::roon_browse_mirror::BrowseItemHint::None => 0.into_dart(),
            crate::api::roon_browse_mirror::BrowseItemHint::Action => 1.into_dart(),
            crate::api::roon_browse_mirror::BrowseItemHint::ActionList => 2.into_dart(),
            crate::api::roon_browse_mirror::BrowseItemHint::List => 3.into_dart(),
            crate::api::roon_browse_mirror::BrowseItemHint::Header => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_browse_mirror::BrowseItemHint>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_browse_mirror::BrowseItemHint>>
    for crate::api::roon_browse_mirror::BrowseItemHint
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_browse_mirror::BrowseItemHint> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::simple::BrowseItems {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.list.into_into_dart().into_dart(),
            self.offset.into_into_dart().into_dart(),
            self.items.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::simple::BrowseItems
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::BrowseItems>
    for crate::api::simple::BrowseItems
{
    fn into_into_dart(self) -> crate::api::simple::BrowseItems {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_browse_mirror::BrowseList> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.title.into_into_dart().into_dart(),
            self.0.count.into_into_dart().into_dart(),
            self.0.level.into_into_dart().into_dart(),
            self.0.subtitle.into_into_dart().into_dart(),
            self.0.image_key.into_into_dart().into_dart(),
            self.0.display_offset.into_into_dart().into_dart(),
            self.0.hint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_browse_mirror::BrowseList>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_browse_mirror::BrowseList>>
    for crate::api::roon_browse_mirror::BrowseList
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_browse_mirror::BrowseList> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_browse_mirror::BrowseListHint> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::roon_browse_mirror::BrowseListHint::None => 0.into_dart(),
            crate::api::roon_browse_mirror::BrowseListHint::ActionList => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_browse_mirror::BrowseListHint>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_browse_mirror::BrowseListHint>>
    for crate::api::roon_browse_mirror::BrowseListHint
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_browse_mirror::BrowseListHint> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::ChangeMode> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::roon_transport_mirror::ChangeMode::Absolute => 0.into_dart(),
            crate::api::roon_transport_mirror::ChangeMode::Relative => 1.into_dart(),
            crate::api::roon_transport_mirror::ChangeMode::RelativeStep => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::ChangeMode>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::ChangeMode>>
    for crate::api::roon_transport_mirror::ChangeMode
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::ChangeMode> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::Control> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::roon_transport_mirror::Control::Play => 0.into_dart(),
            crate::api::roon_transport_mirror::Control::Pause => 1.into_dart(),
            crate::api::roon_transport_mirror::Control::PlayPause => 2.into_dart(),
            crate::api::roon_transport_mirror::Control::Stop => 3.into_dart(),
            crate::api::roon_transport_mirror::Control::Previous => 4.into_dart(),
            crate::api::roon_transport_mirror::Control::Next => 5.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::Control>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::Control>>
    for crate::api::roon_transport_mirror::Control
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::Control> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::simple::ImageKeyValue {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.image_key.into_into_dart().into_dart(),
            self.image.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::simple::ImageKeyValue
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::ImageKeyValue>
    for crate::api::simple::ImageKeyValue
{
    fn into_into_dart(self) -> crate::api::simple::ImageKeyValue {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_browse_mirror::InputPrompt> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.prompt.into_into_dart().into_dart(),
            self.0.action.into_into_dart().into_dart(),
            self.0.value.into_into_dart().into_dart(),
            self.0.is_password.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_browse_mirror::InputPrompt>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_browse_mirror::InputPrompt>>
    for crate::api::roon_browse_mirror::InputPrompt
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_browse_mirror::InputPrompt> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::Mute> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::roon_transport_mirror::Mute::Mute => 0.into_dart(),
            crate::api::roon_transport_mirror::Mute::Unmute => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::Mute>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::Mute>>
    for crate::api::roon_transport_mirror::Mute
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::Mute> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::NowPlaying> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.artist_image_keys.into_into_dart().into_dart(),
            self.0.image_key.into_into_dart().into_dart(),
            self.0.length.into_into_dart().into_dart(),
            self.0.seek_position.into_into_dart().into_dart(),
            self.0.one_line.into_into_dart().into_dart(),
            self.0.two_line.into_into_dart().into_dart(),
            self.0.three_line.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::NowPlaying>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::NowPlaying>>
    for crate::api::roon_transport_mirror::NowPlaying
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::NowPlaying> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::OneLine> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.line1.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::OneLine>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::OneLine>>
    for crate::api::roon_transport_mirror::OneLine
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::OneLine> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::Output> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.output_id.into_into_dart().into_dart(),
            self.0.zone_id.into_into_dart().into_dart(),
            self.0
                .can_group_with_output_ids
                .into_into_dart()
                .into_dart(),
            self.0.display_name.into_into_dart().into_dart(),
            self.0.volume.into_into_dart().into_dart(),
            self.0.source_controls.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::Output>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::Output>>
    for crate::api::roon_transport_mirror::Output
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::Output> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::PlayState> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::roon_transport_mirror::PlayState::Playing => 0.into_dart(),
            crate::api::roon_transport_mirror::PlayState::Paused => 1.into_dart(),
            crate::api::roon_transport_mirror::PlayState::Loading => 2.into_dart(),
            crate::api::roon_transport_mirror::PlayState::Stopped => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::PlayState>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::PlayState>>
    for crate::api::roon_transport_mirror::PlayState
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::PlayState> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::QueueItem> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.image_key.into_into_dart().into_dart(),
            self.0.length.into_into_dart().into_dart(),
            self.0.queue_item_id.into_into_dart().into_dart(),
            self.0.one_line.into_into_dart().into_dart(),
            self.0.two_line.into_into_dart().into_dart(),
            self.0.three_line.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::QueueItem>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::QueueItem>>
    for crate::api::roon_transport_mirror::QueueItem
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::QueueItem> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::Repeat> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::roon_transport_mirror::Repeat::Off => 0.into_dart(),
            crate::api::roon_transport_mirror::Repeat::All => 1.into_dart(),
            crate::api::roon_transport_mirror::Repeat::One => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::Repeat>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::Repeat>>
    for crate::api::roon_transport_mirror::Repeat
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::Repeat> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::simple::RoonEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::simple::RoonEvent::CoreFound(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::CoreLost(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::ZonesChanged(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::ZoneChanged(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::ZoneSeek(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::OutputsChanged(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::BrowseItems(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::BrowseActions(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::BrowseReset => [8.into_dart()].into_dart(),
            crate::api::simple::RoonEvent::Profile(field0) => {
                [9.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::QueueItems(field0) => {
                [10.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::PauseOnTrackEnd(field0) => {
                [11.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::Image(field0) => {
                [12.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::simple::RoonEvent::SettingsSaved => [13.into_dart()].into_dart(),
            crate::api::simple::RoonEvent::Services(field0) => {
                [14.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::simple::RoonEvent {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::RoonEvent>
    for crate::api::simple::RoonEvent
{
    fn into_into_dart(self) -> crate::api::simple::RoonEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::Scale> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::roon_transport_mirror::Scale::Number => 0.into_dart(),
            crate::api::roon_transport_mirror::Scale::Decibel => 1.into_dart(),
            crate::api::roon_transport_mirror::Scale::Incremental => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::Scale>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::Scale>>
    for crate::api::roon_transport_mirror::Scale
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::Scale> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<crate::api::roon_transport_mirror::SourceControls>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.control_key.into_into_dart().into_dart(),
            self.0.display_name.into_into_dart().into_dart(),
            self.0.supports_standby.into_into_dart().into_dart(),
            self.0.status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::SourceControls>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::SourceControls>>
    for crate::api::roon_transport_mirror::SourceControls
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::SourceControls> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::Status> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::roon_transport_mirror::Status::Selected => 0.into_dart(),
            crate::api::roon_transport_mirror::Status::Deselected => 1.into_dart(),
            crate::api::roon_transport_mirror::Status::Standby => 2.into_dart(),
            crate::api::roon_transport_mirror::Status::Indeterminate => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::Status>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::Status>>
    for crate::api::roon_transport_mirror::Status
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::Status> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::ThreeLine> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.line1.into_into_dart().into_dart(),
            self.0.line2.into_into_dart().into_dart(),
            self.0.line3.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::ThreeLine>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::ThreeLine>>
    for crate::api::roon_transport_mirror::ThreeLine
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::ThreeLine> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::TwoLine> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.line1.into_into_dart().into_dart(),
            self.0.line2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::TwoLine>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::TwoLine>>
    for crate::api::roon_transport_mirror::TwoLine
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::TwoLine> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::Volume> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.scale.into_into_dart().into_dart(),
            self.0.min.into_into_dart().into_dart(),
            self.0.max.into_into_dart().into_dart(),
            self.0.value.into_into_dart().into_dart(),
            self.0.step.into_into_dart().into_dart(),
            self.0.is_muted.into_into_dart().into_dart(),
            self.0.hard_limit_min.into_into_dart().into_dart(),
            self.0.hard_limit_max.into_into_dart().into_dart(),
            self.0.soft_limit.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::Volume>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::Volume>>
    for crate::api::roon_transport_mirror::Volume
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::Volume> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::Zone> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.zone_id.into_into_dart().into_dart(),
            self.0.display_name.into_into_dart().into_dart(),
            self.0.outputs.into_into_dart().into_dart(),
            self.0.state.into_into_dart().into_dart(),
            self.0.is_next_allowed.into_into_dart().into_dart(),
            self.0.is_previous_allowed.into_into_dart().into_dart(),
            self.0.is_pause_allowed.into_into_dart().into_dart(),
            self.0.is_play_allowed.into_into_dart().into_dart(),
            self.0.is_seek_allowed.into_into_dart().into_dart(),
            self.0.queue_items_remaining.into_into_dart().into_dart(),
            self.0.queue_time_remaining.into_into_dart().into_dart(),
            self.0.now_playing.into_into_dart().into_dart(),
            self.0.settings.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::Zone>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::Zone>>
    for crate::api::roon_transport_mirror::Zone
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::Zone> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::ZoneSeek> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.zone_id.into_into_dart().into_dart(),
            self.0.queue_time_remaining.into_into_dart().into_dart(),
            self.0.seek_position.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::ZoneSeek>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::ZoneSeek>>
    for crate::api::roon_transport_mirror::ZoneSeek
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::ZoneSeek> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::api::roon_transport_mirror::ZoneSettings> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.repeat.into_into_dart().into_dart(),
            self.0.shuffle.into_into_dart().into_dart(),
            self.0.auto_radio.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::api::roon_transport_mirror::ZoneSettings>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::api::roon_transport_mirror::ZoneSettings>>
    for crate::api::roon_transport_mirror::ZoneSettings
{
    fn into_into_dart(self) -> FrbWrapper<crate::api::roon_transport_mirror::ZoneSettings> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::simple::ZoneSummary {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.zone_id.into_into_dart().into_dart(),
            self.output_ids.into_into_dart().into_dart(),
            self.display_name.into_into_dart().into_dart(),
            self.state.into_into_dart().into_dart(),
            self.now_playing.into_into_dart().into_dart(),
            self.image_key.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::simple::ZoneSummary
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::ZoneSummary>
    for crate::api::simple::ZoneSummary
{
    fn into_into_dart(self) -> crate::api::simple::ZoneSummary {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::roon_browse_mirror::BrowseItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.title, serializer);
        <Option<String>>::sse_encode(self.subtitle, serializer);
        <Option<String>>::sse_encode(self.image_key, serializer);
        <Option<String>>::sse_encode(self.item_key, serializer);
        <Option<crate::api::roon_browse_mirror::BrowseItemHint>>::sse_encode(self.hint, serializer);
        <Option<crate::api::roon_browse_mirror::InputPrompt>>::sse_encode(
            self.input_prompt,
            serializer,
        );
    }
}

impl SseEncode for crate::api::roon_browse_mirror::BrowseItemHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::roon_browse_mirror::BrowseItemHint::None => 0,
                crate::api::roon_browse_mirror::BrowseItemHint::Action => 1,
                crate::api::roon_browse_mirror::BrowseItemHint::ActionList => 2,
                crate::api::roon_browse_mirror::BrowseItemHint::List => 3,
                crate::api::roon_browse_mirror::BrowseItemHint::Header => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::simple::BrowseItems {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::roon_browse_mirror::BrowseList>::sse_encode(self.list, serializer);
        <u32>::sse_encode(self.offset, serializer);
        <Vec<crate::api::roon_browse_mirror::BrowseItem>>::sse_encode(self.items, serializer);
    }
}

impl SseEncode for crate::api::roon_browse_mirror::BrowseList {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.title, serializer);
        <usize>::sse_encode(self.count, serializer);
        <u32>::sse_encode(self.level, serializer);
        <Option<String>>::sse_encode(self.subtitle, serializer);
        <Option<String>>::sse_encode(self.image_key, serializer);
        <Option<usize>>::sse_encode(self.display_offset, serializer);
        <Option<crate::api::roon_browse_mirror::BrowseListHint>>::sse_encode(self.hint, serializer);
    }
}

impl SseEncode for crate::api::roon_browse_mirror::BrowseListHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::roon_browse_mirror::BrowseListHint::None => 0,
                crate::api::roon_browse_mirror::BrowseListHint::ActionList => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::roon_transport_mirror::ChangeMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::roon_transport_mirror::ChangeMode::Absolute => 0,
                crate::api::roon_transport_mirror::ChangeMode::Relative => 1,
                crate::api::roon_transport_mirror::ChangeMode::RelativeStep => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::roon_transport_mirror::Control {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::roon_transport_mirror::Control::Play => 0,
                crate::api::roon_transport_mirror::Control::Pause => 1,
                crate::api::roon_transport_mirror::Control::PlayPause => 2,
                crate::api::roon_transport_mirror::Control::Stop => 3,
                crate::api::roon_transport_mirror::Control::Previous => 4,
                crate::api::roon_transport_mirror::Control::Next => 5,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::api::simple::ImageKeyValue {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.image_key, serializer);
        <Vec<u8>>::sse_encode(self.image, serializer);
    }
}

impl SseEncode for crate::api::roon_browse_mirror::InputPrompt {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.prompt, serializer);
        <String>::sse_encode(self.action, serializer);
        <Option<String>>::sse_encode(self.value, serializer);
        <Option<bool>>::sse_encode(self.is_password, serializer);
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::roon_browse_mirror::BrowseItem> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::roon_browse_mirror::BrowseItem>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::roon_transport_mirror::Output> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::roon_transport_mirror::Output>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::roon_transport_mirror::QueueItem> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::roon_transport_mirror::QueueItem>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::roon_transport_mirror::SourceControls> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::roon_transport_mirror::SourceControls>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::simple::ZoneSummary> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::simple::ZoneSummary>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::roon_transport_mirror::Mute {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::roon_transport_mirror::Mute::Mute => 0,
                crate::api::roon_transport_mirror::Mute::Unmute => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::roon_transport_mirror::NowPlaying {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<String>>>::sse_encode(self.artist_image_keys, serializer);
        <Option<String>>::sse_encode(self.image_key, serializer);
        <Option<u32>>::sse_encode(self.length, serializer);
        <Option<i64>>::sse_encode(self.seek_position, serializer);
        <crate::api::roon_transport_mirror::OneLine>::sse_encode(self.one_line, serializer);
        <crate::api::roon_transport_mirror::TwoLine>::sse_encode(self.two_line, serializer);
        <crate::api::roon_transport_mirror::ThreeLine>::sse_encode(self.three_line, serializer);
    }
}

impl SseEncode for crate::api::roon_transport_mirror::OneLine {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.line1, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::roon_browse_mirror::BrowseItemHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::roon_browse_mirror::BrowseItemHint>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::roon_browse_mirror::BrowseListHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::roon_browse_mirror::BrowseListHint>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::roon_browse_mirror::InputPrompt> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::roon_browse_mirror::InputPrompt>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::roon_transport_mirror::NowPlaying> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::roon_transport_mirror::NowPlaying>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::roon_transport_mirror::Volume> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::roon_transport_mirror::Volume>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::roon_transport_mirror::Zone> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::roon_transport_mirror::Zone>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::roon_transport_mirror::SourceControls>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::roon_transport_mirror::SourceControls>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::roon_transport_mirror::Output {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.output_id, serializer);
        <String>::sse_encode(self.zone_id, serializer);
        <Vec<String>>::sse_encode(self.can_group_with_output_ids, serializer);
        <String>::sse_encode(self.display_name, serializer);
        <Option<crate::api::roon_transport_mirror::Volume>>::sse_encode(self.volume, serializer);
        <Option<Vec<crate::api::roon_transport_mirror::SourceControls>>>::sse_encode(
            self.source_controls,
            serializer,
        );
    }
}

impl SseEncode for crate::api::roon_transport_mirror::PlayState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::roon_transport_mirror::PlayState::Playing => 0,
                crate::api::roon_transport_mirror::PlayState::Paused => 1,
                crate::api::roon_transport_mirror::PlayState::Loading => 2,
                crate::api::roon_transport_mirror::PlayState::Stopped => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::roon_transport_mirror::QueueItem {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.image_key, serializer);
        <u32>::sse_encode(self.length, serializer);
        <u32>::sse_encode(self.queue_item_id, serializer);
        <crate::api::roon_transport_mirror::OneLine>::sse_encode(self.one_line, serializer);
        <crate::api::roon_transport_mirror::TwoLine>::sse_encode(self.two_line, serializer);
        <crate::api::roon_transport_mirror::ThreeLine>::sse_encode(self.three_line, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::roon_transport_mirror::Repeat {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::roon_transport_mirror::Repeat::Off => 0,
                crate::api::roon_transport_mirror::Repeat::All => 1,
                crate::api::roon_transport_mirror::Repeat::One => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::simple::RoonEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::simple::RoonEvent::CoreFound(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::CoreLost(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::ZonesChanged(field0) => {
                <i32>::sse_encode(2, serializer);
                <Vec<crate::api::simple::ZoneSummary>>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::ZoneChanged(field0) => {
                <i32>::sse_encode(3, serializer);
                <Option<crate::api::roon_transport_mirror::Zone>>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::ZoneSeek(field0) => {
                <i32>::sse_encode(4, serializer);
                <crate::api::roon_transport_mirror::ZoneSeek>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::OutputsChanged(field0) => {
                <i32>::sse_encode(5, serializer);
                <std::collections::HashMap<String, String>>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::BrowseItems(field0) => {
                <i32>::sse_encode(6, serializer);
                <crate::api::simple::BrowseItems>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::BrowseActions(field0) => {
                <i32>::sse_encode(7, serializer);
                <Vec<crate::api::roon_browse_mirror::BrowseItem>>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::BrowseReset => {
                <i32>::sse_encode(8, serializer);
            }
            crate::api::simple::RoonEvent::Profile(field0) => {
                <i32>::sse_encode(9, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::QueueItems(field0) => {
                <i32>::sse_encode(10, serializer);
                <Vec<crate::api::roon_transport_mirror::QueueItem>>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::PauseOnTrackEnd(field0) => {
                <i32>::sse_encode(11, serializer);
                <bool>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::Image(field0) => {
                <i32>::sse_encode(12, serializer);
                <crate::api::simple::ImageKeyValue>::sse_encode(field0, serializer);
            }
            crate::api::simple::RoonEvent::SettingsSaved => {
                <i32>::sse_encode(13, serializer);
            }
            crate::api::simple::RoonEvent::Services(field0) => {
                <i32>::sse_encode(14, serializer);
                <Vec<String>>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::api::roon_transport_mirror::Scale {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::roon_transport_mirror::Scale::Number => 0,
                crate::api::roon_transport_mirror::Scale::Decibel => 1,
                crate::api::roon_transport_mirror::Scale::Incremental => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::roon_transport_mirror::SourceControls {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.control_key, serializer);
        <String>::sse_encode(self.display_name, serializer);
        <bool>::sse_encode(self.supports_standby, serializer);
        <crate::api::roon_transport_mirror::Status>::sse_encode(self.status, serializer);
    }
}

impl SseEncode for crate::api::roon_transport_mirror::Status {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::roon_transport_mirror::Status::Selected => 0,
                crate::api::roon_transport_mirror::Status::Deselected => 1,
                crate::api::roon_transport_mirror::Status::Standby => 2,
                crate::api::roon_transport_mirror::Status::Indeterminate => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::roon_transport_mirror::ThreeLine {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.line1, serializer);
        <String>::sse_encode(self.line2, serializer);
        <String>::sse_encode(self.line3, serializer);
    }
}

impl SseEncode for crate::api::roon_transport_mirror::TwoLine {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.line1, serializer);
        <String>::sse_encode(self.line2, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::api::roon_transport_mirror::Volume {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::roon_transport_mirror::Scale>::sse_encode(self.scale, serializer);
        <Option<f32>>::sse_encode(self.min, serializer);
        <Option<f32>>::sse_encode(self.max, serializer);
        <Option<f32>>::sse_encode(self.value, serializer);
        <Option<f32>>::sse_encode(self.step, serializer);
        <Option<bool>>::sse_encode(self.is_muted, serializer);
        <f32>::sse_encode(self.hard_limit_min, serializer);
        <f32>::sse_encode(self.hard_limit_max, serializer);
        <f32>::sse_encode(self.soft_limit, serializer);
    }
}

impl SseEncode for crate::api::roon_transport_mirror::Zone {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.zone_id, serializer);
        <String>::sse_encode(self.display_name, serializer);
        <Vec<crate::api::roon_transport_mirror::Output>>::sse_encode(self.outputs, serializer);
        <crate::api::roon_transport_mirror::PlayState>::sse_encode(self.state, serializer);
        <bool>::sse_encode(self.is_next_allowed, serializer);
        <bool>::sse_encode(self.is_previous_allowed, serializer);
        <bool>::sse_encode(self.is_pause_allowed, serializer);
        <bool>::sse_encode(self.is_play_allowed, serializer);
        <bool>::sse_encode(self.is_seek_allowed, serializer);
        <i64>::sse_encode(self.queue_items_remaining, serializer);
        <i64>::sse_encode(self.queue_time_remaining, serializer);
        <Option<crate::api::roon_transport_mirror::NowPlaying>>::sse_encode(
            self.now_playing,
            serializer,
        );
        <crate::api::roon_transport_mirror::ZoneSettings>::sse_encode(self.settings, serializer);
    }
}

impl SseEncode for crate::api::roon_transport_mirror::ZoneSeek {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.zone_id, serializer);
        <i64>::sse_encode(self.queue_time_remaining, serializer);
        <Option<i64>>::sse_encode(self.seek_position, serializer);
    }
}

impl SseEncode for crate::api::roon_transport_mirror::ZoneSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::roon_transport_mirror::Repeat>::sse_encode(self.repeat, serializer);
        <bool>::sse_encode(self.shuffle, serializer);
        <bool>::sse_encode(self.auto_radio, serializer);
    }
}

impl SseEncode for crate::api::simple::ZoneSummary {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.zone_id, serializer);
        <Vec<String>>::sse_encode(self.output_ids, serializer);
        <String>::sse_encode(self.display_name, serializer);
        <crate::api::roon_transport_mirror::PlayState>::sse_encode(self.state, serializer);
        <Option<String>>::sse_encode(self.now_playing, serializer);
        <Option<String>>::sse_encode(self.image_key, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
