// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/roon_browse_mirror.dart';
import 'api/roon_transport_mirror.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0';

  @override
  int get rustContentHash => -2102101347;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiSimpleBrowse(
      {required int category, required int sessionId});

  Future<void> crateApiSimpleBrowseBack({required int sessionId});

  Future<void> crateApiSimpleBrowseNextPage();

  Future<void> crateApiSimpleBrowseWithInput(
      {required int category, required int sessionId, String? input});

  Future<void> crateApiSimpleChangeVolume(
      {required String outputId, required ChangeMode how, required int value});

  Future<void> crateApiSimpleChangeZoneVolume(
      {required ChangeMode how, required int value});

  Future<void> crateApiSimpleControl({required Control control});

  Future<void> crateApiSimpleControlByZoneId(
      {required String zoneId, required Control control});

  Future<void> crateApiSimpleGetImage({required String imageKey});

  Future<void> crateApiSimpleGroupOutputs({required List<String> outputIds});

  Future<void> crateApiSimpleInitApp();

  Future<void> crateApiSimpleMute(
      {required String outputId, required Mute how});

  Future<void> crateApiSimpleMuteAll();

  Future<void> crateApiSimpleMuteZone();

  Future<void> crateApiSimplePauseAfterQueueItems(
      {required List<int> queueItemIds});

  Future<void> crateApiSimplePauseAll();

  Future<void> crateApiSimplePauseOnTrackEnd();

  Future<void> crateApiSimpleQueryProfile({required int sessionId});

  Future<void> crateApiSimpleSaveSettings({required String settings});

  Future<void> crateApiSimpleSearchArtist(
      {required int sessionId, required String artist});

  Future<void> crateApiSimpleSelectBrowseItem(
      {required int sessionId, required BrowseItem item});

  Future<void> crateApiSimpleSelectQueueItem({required int queueItemId});

  Future<void> crateApiSimpleSelectZone({required String zoneId});

  Future<void> crateApiSimpleSetServerProperties(
      {required String ip, String? port});

  Future<void> crateApiSimpleStandby({required String outputId});

  Future<String> crateApiSimpleStartRoon(
      {required String supportPath,
      required FutureOr<void> Function(RoonEvent) cb});

  Future<void> crateApiSimpleTransferFromZone({required String zoneId});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiSimpleBrowse(
      {required int category, required int sessionId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(category, serializer);
        sse_encode_i_32(sessionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleBrowseConstMeta,
      argValues: [category, sessionId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleBrowseConstMeta => const TaskConstMeta(
        debugName: "browse",
        argNames: ["category", "sessionId"],
      );

  @override
  Future<void> crateApiSimpleBrowseBack({required int sessionId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(sessionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleBrowseBackConstMeta,
      argValues: [sessionId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleBrowseBackConstMeta => const TaskConstMeta(
        debugName: "browse_back",
        argNames: ["sessionId"],
      );

  @override
  Future<void> crateApiSimpleBrowseNextPage() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleBrowseNextPageConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleBrowseNextPageConstMeta =>
      const TaskConstMeta(
        debugName: "browse_next_page",
        argNames: [],
      );

  @override
  Future<void> crateApiSimpleBrowseWithInput(
      {required int category, required int sessionId, String? input}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(category, serializer);
        sse_encode_i_32(sessionId, serializer);
        sse_encode_opt_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleBrowseWithInputConstMeta,
      argValues: [category, sessionId, input],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleBrowseWithInputConstMeta =>
      const TaskConstMeta(
        debugName: "browse_with_input",
        argNames: ["category", "sessionId", "input"],
      );

  @override
  Future<void> crateApiSimpleChangeVolume(
      {required String outputId, required ChangeMode how, required int value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(outputId, serializer);
        sse_encode_change_mode(how, serializer);
        sse_encode_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleChangeVolumeConstMeta,
      argValues: [outputId, how, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleChangeVolumeConstMeta => const TaskConstMeta(
        debugName: "change_volume",
        argNames: ["outputId", "how", "value"],
      );

  @override
  Future<void> crateApiSimpleChangeZoneVolume(
      {required ChangeMode how, required int value}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_change_mode(how, serializer);
        sse_encode_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleChangeZoneVolumeConstMeta,
      argValues: [how, value],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleChangeZoneVolumeConstMeta =>
      const TaskConstMeta(
        debugName: "change_zone_volume",
        argNames: ["how", "value"],
      );

  @override
  Future<void> crateApiSimpleControl({required Control control}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_control(control, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleControlConstMeta,
      argValues: [control],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleControlConstMeta => const TaskConstMeta(
        debugName: "control",
        argNames: ["control"],
      );

  @override
  Future<void> crateApiSimpleControlByZoneId(
      {required String zoneId, required Control control}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(zoneId, serializer);
        sse_encode_control(control, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleControlByZoneIdConstMeta,
      argValues: [zoneId, control],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleControlByZoneIdConstMeta =>
      const TaskConstMeta(
        debugName: "control_by_zone_id",
        argNames: ["zoneId", "control"],
      );

  @override
  Future<void> crateApiSimpleGetImage({required String imageKey}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(imageKey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGetImageConstMeta,
      argValues: [imageKey],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGetImageConstMeta => const TaskConstMeta(
        debugName: "get_image",
        argNames: ["imageKey"],
      );

  @override
  Future<void> crateApiSimpleGroupOutputs({required List<String> outputIds}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(outputIds, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGroupOutputsConstMeta,
      argValues: [outputIds],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGroupOutputsConstMeta => const TaskConstMeta(
        debugName: "group_outputs",
        argNames: ["outputIds"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> crateApiSimpleMute(
      {required String outputId, required Mute how}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(outputId, serializer);
        sse_encode_mute(how, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleMuteConstMeta,
      argValues: [outputId, how],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleMuteConstMeta => const TaskConstMeta(
        debugName: "mute",
        argNames: ["outputId", "how"],
      );

  @override
  Future<void> crateApiSimpleMuteAll() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleMuteAllConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleMuteAllConstMeta => const TaskConstMeta(
        debugName: "mute_all",
        argNames: [],
      );

  @override
  Future<void> crateApiSimpleMuteZone() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleMuteZoneConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleMuteZoneConstMeta => const TaskConstMeta(
        debugName: "mute_zone",
        argNames: [],
      );

  @override
  Future<void> crateApiSimplePauseAfterQueueItems(
      {required List<int> queueItemIds}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(queueItemIds, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimplePauseAfterQueueItemsConstMeta,
      argValues: [queueItemIds],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimplePauseAfterQueueItemsConstMeta =>
      const TaskConstMeta(
        debugName: "pause_after_queue_items",
        argNames: ["queueItemIds"],
      );

  @override
  Future<void> crateApiSimplePauseAll() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimplePauseAllConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimplePauseAllConstMeta => const TaskConstMeta(
        debugName: "pause_all",
        argNames: [],
      );

  @override
  Future<void> crateApiSimplePauseOnTrackEnd() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimplePauseOnTrackEndConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimplePauseOnTrackEndConstMeta =>
      const TaskConstMeta(
        debugName: "pause_on_track_end",
        argNames: [],
      );

  @override
  Future<void> crateApiSimpleQueryProfile({required int sessionId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(sessionId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleQueryProfileConstMeta,
      argValues: [sessionId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleQueryProfileConstMeta => const TaskConstMeta(
        debugName: "query_profile",
        argNames: ["sessionId"],
      );

  @override
  Future<void> crateApiSimpleSaveSettings({required String settings}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(settings, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSaveSettingsConstMeta,
      argValues: [settings],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSaveSettingsConstMeta => const TaskConstMeta(
        debugName: "save_settings",
        argNames: ["settings"],
      );

  @override
  Future<void> crateApiSimpleSearchArtist(
      {required int sessionId, required String artist}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(sessionId, serializer);
        sse_encode_String(artist, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSearchArtistConstMeta,
      argValues: [sessionId, artist],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSearchArtistConstMeta => const TaskConstMeta(
        debugName: "search_artist",
        argNames: ["sessionId", "artist"],
      );

  @override
  Future<void> crateApiSimpleSelectBrowseItem(
      {required int sessionId, required BrowseItem item}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(sessionId, serializer);
        sse_encode_box_autoadd_browse_item(item, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSelectBrowseItemConstMeta,
      argValues: [sessionId, item],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSelectBrowseItemConstMeta =>
      const TaskConstMeta(
        debugName: "select_browse_item",
        argNames: ["sessionId", "item"],
      );

  @override
  Future<void> crateApiSimpleSelectQueueItem({required int queueItemId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(queueItemId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSelectQueueItemConstMeta,
      argValues: [queueItemId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSelectQueueItemConstMeta =>
      const TaskConstMeta(
        debugName: "select_queue_item",
        argNames: ["queueItemId"],
      );

  @override
  Future<void> crateApiSimpleSelectZone({required String zoneId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(zoneId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSelectZoneConstMeta,
      argValues: [zoneId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSelectZoneConstMeta => const TaskConstMeta(
        debugName: "select_zone",
        argNames: ["zoneId"],
      );

  @override
  Future<void> crateApiSimpleSetServerProperties(
      {required String ip, String? port}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(ip, serializer);
        sse_encode_opt_String(port, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleSetServerPropertiesConstMeta,
      argValues: [ip, port],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleSetServerPropertiesConstMeta =>
      const TaskConstMeta(
        debugName: "set_server_properties",
        argNames: ["ip", "port"],
      );

  @override
  Future<void> crateApiSimpleStandby({required String outputId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(outputId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleStandbyConstMeta,
      argValues: [outputId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleStandbyConstMeta => const TaskConstMeta(
        debugName: "standby",
        argNames: ["outputId"],
      );

  @override
  Future<String> crateApiSimpleStartRoon(
      {required String supportPath,
      required FutureOr<void> Function(RoonEvent) cb}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(supportPath, serializer);
        sse_encode_DartFn_Inputs_roon_event_Output_unit_AnyhowException(
            cb, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleStartRoonConstMeta,
      argValues: [supportPath, cb],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleStartRoonConstMeta => const TaskConstMeta(
        debugName: "start_roon",
        argNames: ["supportPath", "cb"],
      );

  @override
  Future<void> crateApiSimpleTransferFromZone({required String zoneId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(zoneId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleTransferFromZoneConstMeta,
      argValues: [zoneId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleTransferFromZoneConstMeta =>
      const TaskConstMeta(
        debugName: "transfer_from_zone",
        argNames: ["zoneId"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_roon_event_Output_unit_AnyhowException(
          FutureOr<void> Function(RoonEvent) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_roon_event(rawArg0);

      Box<void>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_unit(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  FutureOr<void> Function(RoonEvent)
      dco_decode_DartFn_Inputs_roon_event_Output_unit_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  BrowseItem dco_decode_box_autoadd_browse_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_browse_item(raw);
  }

  @protected
  BrowseItemHint dco_decode_box_autoadd_browse_item_hint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_browse_item_hint(raw);
  }

  @protected
  BrowseItems dco_decode_box_autoadd_browse_items(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_browse_items(raw);
  }

  @protected
  BrowseListHint dco_decode_box_autoadd_browse_list_hint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_browse_list_hint(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  ImageKeyValue dco_decode_box_autoadd_image_key_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_image_key_value(raw);
  }

  @protected
  InputPrompt dco_decode_box_autoadd_input_prompt(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_input_prompt(raw);
  }

  @protected
  NowPlaying dco_decode_box_autoadd_now_playing(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_now_playing(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_usize(raw);
  }

  @protected
  Volume dco_decode_box_autoadd_volume(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_volume(raw);
  }

  @protected
  Zone dco_decode_box_autoadd_zone(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_zone(raw);
  }

  @protected
  ZoneSeek dco_decode_box_autoadd_zone_seek(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_zone_seek(raw);
  }

  @protected
  BrowseItem dco_decode_browse_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return BrowseItem(
      title: dco_decode_String(arr[0]),
      subtitle: dco_decode_opt_String(arr[1]),
      imageKey: dco_decode_opt_String(arr[2]),
      itemKey: dco_decode_opt_String(arr[3]),
      hint: dco_decode_opt_box_autoadd_browse_item_hint(arr[4]),
      inputPrompt: dco_decode_opt_box_autoadd_input_prompt(arr[5]),
    );
  }

  @protected
  BrowseItemHint dco_decode_browse_item_hint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowseItemHint.values[raw as int];
  }

  @protected
  BrowseItems dco_decode_browse_items(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BrowseItems(
      list: dco_decode_browse_list(arr[0]),
      offset: dco_decode_u_32(arr[1]),
      items: dco_decode_list_browse_item(arr[2]),
    );
  }

  @protected
  BrowseList dco_decode_browse_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return BrowseList(
      title: dco_decode_String(arr[0]),
      count: dco_decode_usize(arr[1]),
      level: dco_decode_u_32(arr[2]),
      subtitle: dco_decode_opt_String(arr[3]),
      imageKey: dco_decode_opt_String(arr[4]),
      displayOffset: dco_decode_opt_box_autoadd_usize(arr[5]),
      hint: dco_decode_opt_box_autoadd_browse_list_hint(arr[6]),
    );
  }

  @protected
  BrowseListHint dco_decode_browse_list_hint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowseListHint.values[raw as int];
  }

  @protected
  ChangeMode dco_decode_change_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ChangeMode.values[raw as int];
  }

  @protected
  Control dco_decode_control(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Control.values[raw as int];
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  ImageKeyValue dco_decode_image_key_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ImageKeyValue(
      imageKey: dco_decode_String(arr[0]),
      image: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  InputPrompt dco_decode_input_prompt(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return InputPrompt(
      prompt: dco_decode_String(arr[0]),
      action: dco_decode_String(arr[1]),
      value: dco_decode_opt_String(arr[2]),
      isPassword: dco_decode_opt_box_autoadd_bool(arr[3]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<BrowseItem> dco_decode_list_browse_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_browse_item).toList();
  }

  @protected
  List<Output> dco_decode_list_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_output).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_32_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint32List;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<QueueItem> dco_decode_list_queue_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_queue_item).toList();
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<SourceControls> dco_decode_list_source_controls(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_source_controls).toList();
  }

  @protected
  List<ZoneSummary> dco_decode_list_zone_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_zone_summary).toList();
  }

  @protected
  Mute dco_decode_mute(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Mute.values[raw as int];
  }

  @protected
  NowPlaying dco_decode_now_playing(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return NowPlaying(
      artistImageKeys: dco_decode_opt_list_String(arr[0]),
      imageKey: dco_decode_opt_String(arr[1]),
      length: dco_decode_opt_box_autoadd_u_32(arr[2]),
      seekPosition: dco_decode_opt_box_autoadd_i_64(arr[3]),
      oneLine: dco_decode_one_line(arr[4]),
      twoLine: dco_decode_two_line(arr[5]),
      threeLine: dco_decode_three_line(arr[6]),
    );
  }

  @protected
  OneLine dco_decode_one_line(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OneLine(
      line1: dco_decode_String(arr[0]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  BrowseItemHint? dco_decode_opt_box_autoadd_browse_item_hint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_browse_item_hint(raw);
  }

  @protected
  BrowseListHint? dco_decode_opt_box_autoadd_browse_list_hint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_browse_list_hint(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_32(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  InputPrompt? dco_decode_opt_box_autoadd_input_prompt(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_input_prompt(raw);
  }

  @protected
  NowPlaying? dco_decode_opt_box_autoadd_now_playing(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_now_playing(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_usize(raw);
  }

  @protected
  Volume? dco_decode_opt_box_autoadd_volume(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_volume(raw);
  }

  @protected
  Zone? dco_decode_opt_box_autoadd_zone(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_zone(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  List<SourceControls>? dco_decode_opt_list_source_controls(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_source_controls(raw);
  }

  @protected
  Output dco_decode_output(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return Output(
      outputId: dco_decode_String(arr[0]),
      zoneId: dco_decode_String(arr[1]),
      canGroupWithOutputIds: dco_decode_list_String(arr[2]),
      displayName: dco_decode_String(arr[3]),
      volume: dco_decode_opt_box_autoadd_volume(arr[4]),
      sourceControls: dco_decode_opt_list_source_controls(arr[5]),
    );
  }

  @protected
  PlayState dco_decode_play_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PlayState.values[raw as int];
  }

  @protected
  QueueItem dco_decode_queue_item(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return QueueItem(
      imageKey: dco_decode_opt_String(arr[0]),
      length: dco_decode_u_32(arr[1]),
      queueItemId: dco_decode_u_32(arr[2]),
      oneLine: dco_decode_one_line(arr[3]),
      twoLine: dco_decode_two_line(arr[4]),
      threeLine: dco_decode_three_line(arr[5]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  Repeat dco_decode_repeat(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Repeat.values[raw as int];
  }

  @protected
  RoonEvent dco_decode_roon_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return RoonEvent_CoreFound(
          dco_decode_String(raw[1]),
        );
      case 1:
        return RoonEvent_CoreLost(
          dco_decode_String(raw[1]),
        );
      case 2:
        return RoonEvent_ZonesChanged(
          dco_decode_list_zone_summary(raw[1]),
        );
      case 3:
        return RoonEvent_ZoneChanged(
          dco_decode_opt_box_autoadd_zone(raw[1]),
        );
      case 4:
        return RoonEvent_ZoneSeek(
          dco_decode_box_autoadd_zone_seek(raw[1]),
        );
      case 5:
        return RoonEvent_OutputsChanged(
          dco_decode_Map_String_String(raw[1]),
        );
      case 6:
        return RoonEvent_BrowseItems(
          dco_decode_box_autoadd_browse_items(raw[1]),
        );
      case 7:
        return RoonEvent_BrowseActions(
          dco_decode_list_browse_item(raw[1]),
        );
      case 8:
        return RoonEvent_BrowseReset();
      case 9:
        return RoonEvent_Profile(
          dco_decode_String(raw[1]),
        );
      case 10:
        return RoonEvent_QueueItems(
          dco_decode_list_queue_item(raw[1]),
        );
      case 11:
        return RoonEvent_PauseOnTrackEnd(
          dco_decode_bool(raw[1]),
        );
      case 12:
        return RoonEvent_Image(
          dco_decode_box_autoadd_image_key_value(raw[1]),
        );
      case 13:
        return RoonEvent_SettingsSaved();
      case 14:
        return RoonEvent_Services(
          dco_decode_list_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Scale dco_decode_scale(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Scale.values[raw as int];
  }

  @protected
  SourceControls dco_decode_source_controls(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SourceControls(
      controlKey: dco_decode_String(arr[0]),
      displayName: dco_decode_String(arr[1]),
      supportsStandby: dco_decode_bool(arr[2]),
      status: dco_decode_status(arr[3]),
    );
  }

  @protected
  Status dco_decode_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Status.values[raw as int];
  }

  @protected
  ThreeLine dco_decode_three_line(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ThreeLine(
      line1: dco_decode_String(arr[0]),
      line2: dco_decode_String(arr[1]),
      line3: dco_decode_String(arr[2]),
    );
  }

  @protected
  TwoLine dco_decode_two_line(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TwoLine(
      line1: dco_decode_String(arr[0]),
      line2: dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  Volume dco_decode_volume(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return Volume(
      scale: dco_decode_scale(arr[0]),
      min: dco_decode_opt_box_autoadd_f_32(arr[1]),
      max: dco_decode_opt_box_autoadd_f_32(arr[2]),
      value: dco_decode_opt_box_autoadd_f_32(arr[3]),
      step: dco_decode_opt_box_autoadd_f_32(arr[4]),
      isMuted: dco_decode_opt_box_autoadd_bool(arr[5]),
      hardLimitMin: dco_decode_f_32(arr[6]),
      hardLimitMax: dco_decode_f_32(arr[7]),
      softLimit: dco_decode_f_32(arr[8]),
    );
  }

  @protected
  Zone dco_decode_zone(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return Zone(
      zoneId: dco_decode_String(arr[0]),
      displayName: dco_decode_String(arr[1]),
      outputs: dco_decode_list_output(arr[2]),
      state: dco_decode_play_state(arr[3]),
      isNextAllowed: dco_decode_bool(arr[4]),
      isPreviousAllowed: dco_decode_bool(arr[5]),
      isPauseAllowed: dco_decode_bool(arr[6]),
      isPlayAllowed: dco_decode_bool(arr[7]),
      isSeekAllowed: dco_decode_bool(arr[8]),
      queueItemsRemaining: dco_decode_i_64(arr[9]),
      queueTimeRemaining: dco_decode_i_64(arr[10]),
      nowPlaying: dco_decode_opt_box_autoadd_now_playing(arr[11]),
      settings: dco_decode_zone_settings(arr[12]),
    );
  }

  @protected
  ZoneSeek dco_decode_zone_seek(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ZoneSeek(
      zoneId: dco_decode_String(arr[0]),
      queueTimeRemaining: dco_decode_i_64(arr[1]),
      seekPosition: dco_decode_opt_box_autoadd_i_64(arr[2]),
    );
  }

  @protected
  ZoneSettings dco_decode_zone_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ZoneSettings(
      repeat: dco_decode_repeat(arr[0]),
      shuffle: dco_decode_bool(arr[1]),
      autoRadio: dco_decode_bool(arr[2]),
    );
  }

  @protected
  ZoneSummary dco_decode_zone_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ZoneSummary(
      zoneId: dco_decode_String(arr[0]),
      outputIds: dco_decode_list_String(arr[1]),
      displayName: dco_decode_String(arr[2]),
      state: dco_decode_play_state(arr[3]),
      nowPlaying: dco_decode_opt_String(arr[4]),
      imageKey: dco_decode_opt_String(arr[5]),
    );
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  BrowseItem sse_decode_box_autoadd_browse_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_browse_item(deserializer));
  }

  @protected
  BrowseItemHint sse_decode_box_autoadd_browse_item_hint(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_browse_item_hint(deserializer));
  }

  @protected
  BrowseItems sse_decode_box_autoadd_browse_items(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_browse_items(deserializer));
  }

  @protected
  BrowseListHint sse_decode_box_autoadd_browse_list_hint(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_browse_list_hint(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_32(deserializer));
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  ImageKeyValue sse_decode_box_autoadd_image_key_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_image_key_value(deserializer));
  }

  @protected
  InputPrompt sse_decode_box_autoadd_input_prompt(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_input_prompt(deserializer));
  }

  @protected
  NowPlaying sse_decode_box_autoadd_now_playing(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_now_playing(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_usize(deserializer));
  }

  @protected
  Volume sse_decode_box_autoadd_volume(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_volume(deserializer));
  }

  @protected
  Zone sse_decode_box_autoadd_zone(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_zone(deserializer));
  }

  @protected
  ZoneSeek sse_decode_box_autoadd_zone_seek(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_zone_seek(deserializer));
  }

  @protected
  BrowseItem sse_decode_browse_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_subtitle = sse_decode_opt_String(deserializer);
    var var_imageKey = sse_decode_opt_String(deserializer);
    var var_itemKey = sse_decode_opt_String(deserializer);
    var var_hint = sse_decode_opt_box_autoadd_browse_item_hint(deserializer);
    var var_inputPrompt = sse_decode_opt_box_autoadd_input_prompt(deserializer);
    return BrowseItem(
        title: var_title,
        subtitle: var_subtitle,
        imageKey: var_imageKey,
        itemKey: var_itemKey,
        hint: var_hint,
        inputPrompt: var_inputPrompt);
  }

  @protected
  BrowseItemHint sse_decode_browse_item_hint(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BrowseItemHint.values[inner];
  }

  @protected
  BrowseItems sse_decode_browse_items(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_list = sse_decode_browse_list(deserializer);
    var var_offset = sse_decode_u_32(deserializer);
    var var_items = sse_decode_list_browse_item(deserializer);
    return BrowseItems(list: var_list, offset: var_offset, items: var_items);
  }

  @protected
  BrowseList sse_decode_browse_list(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_count = sse_decode_usize(deserializer);
    var var_level = sse_decode_u_32(deserializer);
    var var_subtitle = sse_decode_opt_String(deserializer);
    var var_imageKey = sse_decode_opt_String(deserializer);
    var var_displayOffset = sse_decode_opt_box_autoadd_usize(deserializer);
    var var_hint = sse_decode_opt_box_autoadd_browse_list_hint(deserializer);
    return BrowseList(
        title: var_title,
        count: var_count,
        level: var_level,
        subtitle: var_subtitle,
        imageKey: var_imageKey,
        displayOffset: var_displayOffset,
        hint: var_hint);
  }

  @protected
  BrowseListHint sse_decode_browse_list_hint(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BrowseListHint.values[inner];
  }

  @protected
  ChangeMode sse_decode_change_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ChangeMode.values[inner];
  }

  @protected
  Control sse_decode_control(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Control.values[inner];
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  ImageKeyValue sse_decode_image_key_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_imageKey = sse_decode_String(deserializer);
    var var_image = sse_decode_list_prim_u_8_strict(deserializer);
    return ImageKeyValue(imageKey: var_imageKey, image: var_image);
  }

  @protected
  InputPrompt sse_decode_input_prompt(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_prompt = sse_decode_String(deserializer);
    var var_action = sse_decode_String(deserializer);
    var var_value = sse_decode_opt_String(deserializer);
    var var_isPassword = sse_decode_opt_box_autoadd_bool(deserializer);
    return InputPrompt(
        prompt: var_prompt,
        action: var_action,
        value: var_value,
        isPassword: var_isPassword);
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<BrowseItem> sse_decode_list_browse_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BrowseItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_browse_item(deserializer));
    }
    return ans_;
  }

  @protected
  List<Output> sse_decode_list_output(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Output>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_output(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_32_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<QueueItem> sse_decode_list_queue_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <QueueItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_queue_item(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<SourceControls> sse_decode_list_source_controls(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SourceControls>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_source_controls(deserializer));
    }
    return ans_;
  }

  @protected
  List<ZoneSummary> sse_decode_list_zone_summary(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ZoneSummary>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_zone_summary(deserializer));
    }
    return ans_;
  }

  @protected
  Mute sse_decode_mute(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Mute.values[inner];
  }

  @protected
  NowPlaying sse_decode_now_playing(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_artistImageKeys = sse_decode_opt_list_String(deserializer);
    var var_imageKey = sse_decode_opt_String(deserializer);
    var var_length = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_seekPosition = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_oneLine = sse_decode_one_line(deserializer);
    var var_twoLine = sse_decode_two_line(deserializer);
    var var_threeLine = sse_decode_three_line(deserializer);
    return NowPlaying(
        artistImageKeys: var_artistImageKeys,
        imageKey: var_imageKey,
        length: var_length,
        seekPosition: var_seekPosition,
        oneLine: var_oneLine,
        twoLine: var_twoLine,
        threeLine: var_threeLine);
  }

  @protected
  OneLine sse_decode_one_line(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_line1 = sse_decode_String(deserializer);
    return OneLine(line1: var_line1);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BrowseItemHint? sse_decode_opt_box_autoadd_browse_item_hint(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_browse_item_hint(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BrowseListHint? sse_decode_opt_box_autoadd_browse_list_hint(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_browse_list_hint(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  InputPrompt? sse_decode_opt_box_autoadd_input_prompt(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_input_prompt(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NowPlaying? sse_decode_opt_box_autoadd_now_playing(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_now_playing(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Volume? sse_decode_opt_box_autoadd_volume(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_volume(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Zone? sse_decode_opt_box_autoadd_zone(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_zone(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<SourceControls>? sse_decode_opt_list_source_controls(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_source_controls(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Output sse_decode_output(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_outputId = sse_decode_String(deserializer);
    var var_zoneId = sse_decode_String(deserializer);
    var var_canGroupWithOutputIds = sse_decode_list_String(deserializer);
    var var_displayName = sse_decode_String(deserializer);
    var var_volume = sse_decode_opt_box_autoadd_volume(deserializer);
    var var_sourceControls = sse_decode_opt_list_source_controls(deserializer);
    return Output(
        outputId: var_outputId,
        zoneId: var_zoneId,
        canGroupWithOutputIds: var_canGroupWithOutputIds,
        displayName: var_displayName,
        volume: var_volume,
        sourceControls: var_sourceControls);
  }

  @protected
  PlayState sse_decode_play_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PlayState.values[inner];
  }

  @protected
  QueueItem sse_decode_queue_item(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_imageKey = sse_decode_opt_String(deserializer);
    var var_length = sse_decode_u_32(deserializer);
    var var_queueItemId = sse_decode_u_32(deserializer);
    var var_oneLine = sse_decode_one_line(deserializer);
    var var_twoLine = sse_decode_two_line(deserializer);
    var var_threeLine = sse_decode_three_line(deserializer);
    return QueueItem(
        imageKey: var_imageKey,
        length: var_length,
        queueItemId: var_queueItemId,
        oneLine: var_oneLine,
        twoLine: var_twoLine,
        threeLine: var_threeLine);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Repeat sse_decode_repeat(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Repeat.values[inner];
  }

  @protected
  RoonEvent sse_decode_roon_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return RoonEvent_CoreFound(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return RoonEvent_CoreLost(var_field0);
      case 2:
        var var_field0 = sse_decode_list_zone_summary(deserializer);
        return RoonEvent_ZonesChanged(var_field0);
      case 3:
        var var_field0 = sse_decode_opt_box_autoadd_zone(deserializer);
        return RoonEvent_ZoneChanged(var_field0);
      case 4:
        var var_field0 = sse_decode_box_autoadd_zone_seek(deserializer);
        return RoonEvent_ZoneSeek(var_field0);
      case 5:
        var var_field0 = sse_decode_Map_String_String(deserializer);
        return RoonEvent_OutputsChanged(var_field0);
      case 6:
        var var_field0 = sse_decode_box_autoadd_browse_items(deserializer);
        return RoonEvent_BrowseItems(var_field0);
      case 7:
        var var_field0 = sse_decode_list_browse_item(deserializer);
        return RoonEvent_BrowseActions(var_field0);
      case 8:
        return RoonEvent_BrowseReset();
      case 9:
        var var_field0 = sse_decode_String(deserializer);
        return RoonEvent_Profile(var_field0);
      case 10:
        var var_field0 = sse_decode_list_queue_item(deserializer);
        return RoonEvent_QueueItems(var_field0);
      case 11:
        var var_field0 = sse_decode_bool(deserializer);
        return RoonEvent_PauseOnTrackEnd(var_field0);
      case 12:
        var var_field0 = sse_decode_box_autoadd_image_key_value(deserializer);
        return RoonEvent_Image(var_field0);
      case 13:
        return RoonEvent_SettingsSaved();
      case 14:
        var var_field0 = sse_decode_list_String(deserializer);
        return RoonEvent_Services(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Scale sse_decode_scale(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Scale.values[inner];
  }

  @protected
  SourceControls sse_decode_source_controls(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_controlKey = sse_decode_String(deserializer);
    var var_displayName = sse_decode_String(deserializer);
    var var_supportsStandby = sse_decode_bool(deserializer);
    var var_status = sse_decode_status(deserializer);
    return SourceControls(
        controlKey: var_controlKey,
        displayName: var_displayName,
        supportsStandby: var_supportsStandby,
        status: var_status);
  }

  @protected
  Status sse_decode_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Status.values[inner];
  }

  @protected
  ThreeLine sse_decode_three_line(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_line1 = sse_decode_String(deserializer);
    var var_line2 = sse_decode_String(deserializer);
    var var_line3 = sse_decode_String(deserializer);
    return ThreeLine(line1: var_line1, line2: var_line2, line3: var_line3);
  }

  @protected
  TwoLine sse_decode_two_line(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_line1 = sse_decode_String(deserializer);
    var var_line2 = sse_decode_String(deserializer);
    return TwoLine(line1: var_line1, line2: var_line2);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  Volume sse_decode_volume(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_scale = sse_decode_scale(deserializer);
    var var_min = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_max = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_value = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_step = sse_decode_opt_box_autoadd_f_32(deserializer);
    var var_isMuted = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_hardLimitMin = sse_decode_f_32(deserializer);
    var var_hardLimitMax = sse_decode_f_32(deserializer);
    var var_softLimit = sse_decode_f_32(deserializer);
    return Volume(
        scale: var_scale,
        min: var_min,
        max: var_max,
        value: var_value,
        step: var_step,
        isMuted: var_isMuted,
        hardLimitMin: var_hardLimitMin,
        hardLimitMax: var_hardLimitMax,
        softLimit: var_softLimit);
  }

  @protected
  Zone sse_decode_zone(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_zoneId = sse_decode_String(deserializer);
    var var_displayName = sse_decode_String(deserializer);
    var var_outputs = sse_decode_list_output(deserializer);
    var var_state = sse_decode_play_state(deserializer);
    var var_isNextAllowed = sse_decode_bool(deserializer);
    var var_isPreviousAllowed = sse_decode_bool(deserializer);
    var var_isPauseAllowed = sse_decode_bool(deserializer);
    var var_isPlayAllowed = sse_decode_bool(deserializer);
    var var_isSeekAllowed = sse_decode_bool(deserializer);
    var var_queueItemsRemaining = sse_decode_i_64(deserializer);
    var var_queueTimeRemaining = sse_decode_i_64(deserializer);
    var var_nowPlaying = sse_decode_opt_box_autoadd_now_playing(deserializer);
    var var_settings = sse_decode_zone_settings(deserializer);
    return Zone(
        zoneId: var_zoneId,
        displayName: var_displayName,
        outputs: var_outputs,
        state: var_state,
        isNextAllowed: var_isNextAllowed,
        isPreviousAllowed: var_isPreviousAllowed,
        isPauseAllowed: var_isPauseAllowed,
        isPlayAllowed: var_isPlayAllowed,
        isSeekAllowed: var_isSeekAllowed,
        queueItemsRemaining: var_queueItemsRemaining,
        queueTimeRemaining: var_queueTimeRemaining,
        nowPlaying: var_nowPlaying,
        settings: var_settings);
  }

  @protected
  ZoneSeek sse_decode_zone_seek(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_zoneId = sse_decode_String(deserializer);
    var var_queueTimeRemaining = sse_decode_i_64(deserializer);
    var var_seekPosition = sse_decode_opt_box_autoadd_i_64(deserializer);
    return ZoneSeek(
        zoneId: var_zoneId,
        queueTimeRemaining: var_queueTimeRemaining,
        seekPosition: var_seekPosition);
  }

  @protected
  ZoneSettings sse_decode_zone_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_repeat = sse_decode_repeat(deserializer);
    var var_shuffle = sse_decode_bool(deserializer);
    var var_autoRadio = sse_decode_bool(deserializer);
    return ZoneSettings(
        repeat: var_repeat, shuffle: var_shuffle, autoRadio: var_autoRadio);
  }

  @protected
  ZoneSummary sse_decode_zone_summary(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_zoneId = sse_decode_String(deserializer);
    var var_outputIds = sse_decode_list_String(deserializer);
    var var_displayName = sse_decode_String(deserializer);
    var var_state = sse_decode_play_state(deserializer);
    var var_nowPlaying = sse_decode_opt_String(deserializer);
    var var_imageKey = sse_decode_opt_String(deserializer);
    return ZoneSummary(
        zoneId: var_zoneId,
        outputIds: var_outputIds,
        displayName: var_displayName,
        state: var_state,
        nowPlaying: var_nowPlaying,
        imageKey: var_imageKey);
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_roon_event_Output_unit_AnyhowException(
      FutureOr<void> Function(RoonEvent) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_roon_event_Output_unit_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        BigInt.from(PlatformPointerUtil.ptrToInt(encodeDartOpaque(
                self, portManager.dartHandlerPort, generalizedFrbRustBinding)))
            .toUnsigned(64),
        serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_browse_item(
      BrowseItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_browse_item(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_browse_item_hint(
      BrowseItemHint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_browse_item_hint(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_browse_items(
      BrowseItems self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_browse_items(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_browse_list_hint(
      BrowseListHint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_browse_list_hint(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(
      PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_image_key_value(
      ImageKeyValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_image_key_value(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_input_prompt(
      InputPrompt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_input_prompt(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_now_playing(
      NowPlaying self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_now_playing(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_volume(Volume self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_volume(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_zone(Zone self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_zone(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_zone_seek(
      ZoneSeek self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_zone_seek(self, serializer);
  }

  @protected
  void sse_encode_browse_item(BrowseItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_opt_String(self.subtitle, serializer);
    sse_encode_opt_String(self.imageKey, serializer);
    sse_encode_opt_String(self.itemKey, serializer);
    sse_encode_opt_box_autoadd_browse_item_hint(self.hint, serializer);
    sse_encode_opt_box_autoadd_input_prompt(self.inputPrompt, serializer);
  }

  @protected
  void sse_encode_browse_item_hint(
      BrowseItemHint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_browse_items(BrowseItems self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_browse_list(self.list, serializer);
    sse_encode_u_32(self.offset, serializer);
    sse_encode_list_browse_item(self.items, serializer);
  }

  @protected
  void sse_encode_browse_list(BrowseList self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_usize(self.count, serializer);
    sse_encode_u_32(self.level, serializer);
    sse_encode_opt_String(self.subtitle, serializer);
    sse_encode_opt_String(self.imageKey, serializer);
    sse_encode_opt_box_autoadd_usize(self.displayOffset, serializer);
    sse_encode_opt_box_autoadd_browse_list_hint(self.hint, serializer);
  }

  @protected
  void sse_encode_browse_list_hint(
      BrowseListHint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_change_mode(ChangeMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_control(Control self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_image_key_value(
      ImageKeyValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.imageKey, serializer);
    sse_encode_list_prim_u_8_strict(self.image, serializer);
  }

  @protected
  void sse_encode_input_prompt(InputPrompt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.prompt, serializer);
    sse_encode_String(self.action, serializer);
    sse_encode_opt_String(self.value, serializer);
    sse_encode_opt_box_autoadd_bool(self.isPassword, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_browse_item(
      List<BrowseItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_browse_item(item, serializer);
    }
  }

  @protected
  void sse_encode_list_output(List<Output> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_output(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_32_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint32List(self is Uint32List ? self : Uint32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_queue_item(
      List<QueueItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_queue_item(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_source_controls(
      List<SourceControls> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_source_controls(item, serializer);
    }
  }

  @protected
  void sse_encode_list_zone_summary(
      List<ZoneSummary> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_zone_summary(item, serializer);
    }
  }

  @protected
  void sse_encode_mute(Mute self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_now_playing(NowPlaying self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_String(self.artistImageKeys, serializer);
    sse_encode_opt_String(self.imageKey, serializer);
    sse_encode_opt_box_autoadd_u_32(self.length, serializer);
    sse_encode_opt_box_autoadd_i_64(self.seekPosition, serializer);
    sse_encode_one_line(self.oneLine, serializer);
    sse_encode_two_line(self.twoLine, serializer);
    sse_encode_three_line(self.threeLine, serializer);
  }

  @protected
  void sse_encode_one_line(OneLine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.line1, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_browse_item_hint(
      BrowseItemHint? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_browse_item_hint(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_browse_list_hint(
      BrowseListHint? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_browse_list_hint(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(
      PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_input_prompt(
      InputPrompt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_input_prompt(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_now_playing(
      NowPlaying? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_now_playing(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(
      BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_volume(
      Volume? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_volume(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_zone(Zone? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_zone(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_source_controls(
      List<SourceControls>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_source_controls(self, serializer);
    }
  }

  @protected
  void sse_encode_output(Output self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.outputId, serializer);
    sse_encode_String(self.zoneId, serializer);
    sse_encode_list_String(self.canGroupWithOutputIds, serializer);
    sse_encode_String(self.displayName, serializer);
    sse_encode_opt_box_autoadd_volume(self.volume, serializer);
    sse_encode_opt_list_source_controls(self.sourceControls, serializer);
  }

  @protected
  void sse_encode_play_state(PlayState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_queue_item(QueueItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.imageKey, serializer);
    sse_encode_u_32(self.length, serializer);
    sse_encode_u_32(self.queueItemId, serializer);
    sse_encode_one_line(self.oneLine, serializer);
    sse_encode_two_line(self.twoLine, serializer);
    sse_encode_three_line(self.threeLine, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_repeat(Repeat self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_roon_event(RoonEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case RoonEvent_CoreFound(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case RoonEvent_CoreLost(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case RoonEvent_ZonesChanged(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_list_zone_summary(field0, serializer);
      case RoonEvent_ZoneChanged(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_opt_box_autoadd_zone(field0, serializer);
      case RoonEvent_ZoneSeek(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_box_autoadd_zone_seek(field0, serializer);
      case RoonEvent_OutputsChanged(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_Map_String_String(field0, serializer);
      case RoonEvent_BrowseItems(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_box_autoadd_browse_items(field0, serializer);
      case RoonEvent_BrowseActions(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_list_browse_item(field0, serializer);
      case RoonEvent_BrowseReset():
        sse_encode_i_32(8, serializer);
      case RoonEvent_Profile(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_String(field0, serializer);
      case RoonEvent_QueueItems(field0: final field0):
        sse_encode_i_32(10, serializer);
        sse_encode_list_queue_item(field0, serializer);
      case RoonEvent_PauseOnTrackEnd(field0: final field0):
        sse_encode_i_32(11, serializer);
        sse_encode_bool(field0, serializer);
      case RoonEvent_Image(field0: final field0):
        sse_encode_i_32(12, serializer);
        sse_encode_box_autoadd_image_key_value(field0, serializer);
      case RoonEvent_SettingsSaved():
        sse_encode_i_32(13, serializer);
      case RoonEvent_Services(field0: final field0):
        sse_encode_i_32(14, serializer);
        sse_encode_list_String(field0, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_scale(Scale self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_source_controls(
      SourceControls self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.controlKey, serializer);
    sse_encode_String(self.displayName, serializer);
    sse_encode_bool(self.supportsStandby, serializer);
    sse_encode_status(self.status, serializer);
  }

  @protected
  void sse_encode_status(Status self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_three_line(ThreeLine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.line1, serializer);
    sse_encode_String(self.line2, serializer);
    sse_encode_String(self.line3, serializer);
  }

  @protected
  void sse_encode_two_line(TwoLine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.line1, serializer);
    sse_encode_String(self.line2, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_volume(Volume self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_scale(self.scale, serializer);
    sse_encode_opt_box_autoadd_f_32(self.min, serializer);
    sse_encode_opt_box_autoadd_f_32(self.max, serializer);
    sse_encode_opt_box_autoadd_f_32(self.value, serializer);
    sse_encode_opt_box_autoadd_f_32(self.step, serializer);
    sse_encode_opt_box_autoadd_bool(self.isMuted, serializer);
    sse_encode_f_32(self.hardLimitMin, serializer);
    sse_encode_f_32(self.hardLimitMax, serializer);
    sse_encode_f_32(self.softLimit, serializer);
  }

  @protected
  void sse_encode_zone(Zone self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.zoneId, serializer);
    sse_encode_String(self.displayName, serializer);
    sse_encode_list_output(self.outputs, serializer);
    sse_encode_play_state(self.state, serializer);
    sse_encode_bool(self.isNextAllowed, serializer);
    sse_encode_bool(self.isPreviousAllowed, serializer);
    sse_encode_bool(self.isPauseAllowed, serializer);
    sse_encode_bool(self.isPlayAllowed, serializer);
    sse_encode_bool(self.isSeekAllowed, serializer);
    sse_encode_i_64(self.queueItemsRemaining, serializer);
    sse_encode_i_64(self.queueTimeRemaining, serializer);
    sse_encode_opt_box_autoadd_now_playing(self.nowPlaying, serializer);
    sse_encode_zone_settings(self.settings, serializer);
  }

  @protected
  void sse_encode_zone_seek(ZoneSeek self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.zoneId, serializer);
    sse_encode_i_64(self.queueTimeRemaining, serializer);
    sse_encode_opt_box_autoadd_i_64(self.seekPosition, serializer);
  }

  @protected
  void sse_encode_zone_settings(ZoneSettings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_repeat(self.repeat, serializer);
    sse_encode_bool(self.shuffle, serializer);
    sse_encode_bool(self.autoRadio, serializer);
  }

  @protected
  void sse_encode_zone_summary(ZoneSummary self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.zoneId, serializer);
    sse_encode_list_String(self.outputIds, serializer);
    sse_encode_String(self.displayName, serializer);
    sse_encode_play_state(self.state, serializer);
    sse_encode_opt_String(self.nowPlaying, serializer);
    sse_encode_opt_String(self.imageKey, serializer);
  }
}
