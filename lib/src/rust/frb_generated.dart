// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/roon_browse_wrapper.dart';
import 'api/roon_transport_wrapper.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.24';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String? browseItemImageKey({required BrowseItem that, dynamic hint});

  String? browseItemItemKey({required BrowseItem that, dynamic hint});

  Future<BrowseItem> browseItemNew(
      {required RoonApiBrowseItem inner, dynamic hint});

  String? browseItemSubtitle({required BrowseItem that, dynamic hint});

  String browseItemTitle({required BrowseItem that, dynamic hint});

  String roonZoneDisplayName({required RoonZone that, dynamic hint});

  Future<RoonZone> roonZoneNew(
      {required RoonApiTransportZone inner, dynamic hint});

  ZoneNowPlaying? roonZoneNowPlaying({required RoonZone that, dynamic hint});

  ZoneState roonZoneState({required RoonZone that, dynamic hint});

  List<String>? zoneNowPlayingArtistImageKey(
      {required ZoneNowPlaying that, dynamic hint});

  String? zoneNowPlayingImageKey({required ZoneNowPlaying that, dynamic hint});

  int? zoneNowPlayingLength({required ZoneNowPlaying that, dynamic hint});

  Future<ZoneNowPlaying> zoneNowPlayingNew(
      {required RoonApiTransportNowPlaying inner, dynamic hint});

  String zoneNowPlayingOneLine({required ZoneNowPlaying that, dynamic hint});

  int? zoneNowPlayingSeekPosition({required ZoneNowPlaying that, dynamic hint});

  List<String> zoneNowPlayingThreeLine(
      {required ZoneNowPlaying that, dynamic hint});

  List<String> zoneNowPlayingTwoLine(
      {required ZoneNowPlaying that, dynamic hint});

  Future<ZoneState> zoneStateFrom(
      {required RoonApiTransportState inner, dynamic hint});

  Future<void> getImage(
      {required String imageKey,
      required int width,
      required int height,
      dynamic hint});

  Future<void> initApp({dynamic hint});

  Future<void> selectBrowseItem({String? itemKey, dynamic hint});

  Future<void> selectZone({required String zoneId, dynamic hint});

  Future<void> startRoon(
      {required FutureOr<void> Function(RoonEvent) cb, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BrowseItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BrowseItem;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BrowseItemPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoonZone;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoonZone;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RoonZonePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ZoneNowPlaying;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ZoneNowPlaying;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ZoneNowPlayingPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoonApiBrowseItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoonApiBrowseItem;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RoonApiBrowseItemPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoonApiTransportNowPlaying;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoonApiTransportNowPlaying;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RoonApiTransportNowPlayingPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoonApiTransportState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoonApiTransportState;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RoonApiTransportStatePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoonApiTransportZone;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoonApiTransportZone;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RoonApiTransportZonePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String? browseItemImageKey({required BrowseItem that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kBrowseItemImageKeyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBrowseItemImageKeyConstMeta => const TaskConstMeta(
        debugName: "BrowseItem_image_key",
        argNames: ["that"],
      );

  @override
  String? browseItemItemKey({required BrowseItem that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kBrowseItemItemKeyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBrowseItemItemKeyConstMeta => const TaskConstMeta(
        debugName: "BrowseItem_item_key",
        argNames: ["that"],
      );

  @override
  Future<BrowseItem> browseItemNew(
      {required RoonApiBrowseItem inner, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apibrowseItem(
            inner, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem,
        decodeErrorData: null,
      ),
      constMeta: kBrowseItemNewConstMeta,
      argValues: [inner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBrowseItemNewConstMeta => const TaskConstMeta(
        debugName: "BrowseItem_new",
        argNames: ["inner"],
      );

  @override
  String? browseItemSubtitle({required BrowseItem that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kBrowseItemSubtitleConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBrowseItemSubtitleConstMeta => const TaskConstMeta(
        debugName: "BrowseItem_subtitle",
        argNames: ["that"],
      );

  @override
  String browseItemTitle({required BrowseItem that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kBrowseItemTitleConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBrowseItemTitleConstMeta => const TaskConstMeta(
        debugName: "BrowseItem_title",
        argNames: ["that"],
      );

  @override
  String roonZoneDisplayName({required RoonZone that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRoonZoneDisplayNameConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRoonZoneDisplayNameConstMeta => const TaskConstMeta(
        debugName: "RoonZone_display_name",
        argNames: ["that"],
      );

  @override
  Future<RoonZone> roonZoneNew(
      {required RoonApiTransportZone inner, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportZone(
            inner, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone,
        decodeErrorData: null,
      ),
      constMeta: kRoonZoneNewConstMeta,
      argValues: [inner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRoonZoneNewConstMeta => const TaskConstMeta(
        debugName: "RoonZone_new",
        argNames: ["inner"],
      );

  @override
  ZoneNowPlaying? roonZoneNowPlaying({required RoonZone that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying,
        decodeErrorData: null,
      ),
      constMeta: kRoonZoneNowPlayingConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRoonZoneNowPlayingConstMeta => const TaskConstMeta(
        debugName: "RoonZone_now_playing",
        argNames: ["that"],
      );

  @override
  ZoneState roonZoneState({required RoonZone that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_zone_state,
        decodeErrorData: null,
      ),
      constMeta: kRoonZoneStateConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRoonZoneStateConstMeta => const TaskConstMeta(
        debugName: "RoonZone_state",
        argNames: ["that"],
      );

  @override
  List<String>? zoneNowPlayingArtistImageKey(
      {required ZoneNowPlaying that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_String,
        decodeErrorData: null,
      ),
      constMeta: kZoneNowPlayingArtistImageKeyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZoneNowPlayingArtistImageKeyConstMeta =>
      const TaskConstMeta(
        debugName: "ZoneNowPlaying_artist_image_key",
        argNames: ["that"],
      );

  @override
  String? zoneNowPlayingImageKey({required ZoneNowPlaying that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kZoneNowPlayingImageKeyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZoneNowPlayingImageKeyConstMeta => const TaskConstMeta(
        debugName: "ZoneNowPlaying_image_key",
        argNames: ["that"],
      );

  @override
  int? zoneNowPlayingLength({required ZoneNowPlaying that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kZoneNowPlayingLengthConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZoneNowPlayingLengthConstMeta => const TaskConstMeta(
        debugName: "ZoneNowPlaying_length",
        argNames: ["that"],
      );

  @override
  Future<ZoneNowPlaying> zoneNowPlayingNew(
      {required RoonApiTransportNowPlaying inner, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportNowPlaying(
            inner, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying,
        decodeErrorData: null,
      ),
      constMeta: kZoneNowPlayingNewConstMeta,
      argValues: [inner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZoneNowPlayingNewConstMeta => const TaskConstMeta(
        debugName: "ZoneNowPlaying_new",
        argNames: ["inner"],
      );

  @override
  String zoneNowPlayingOneLine({required ZoneNowPlaying that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kZoneNowPlayingOneLineConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZoneNowPlayingOneLineConstMeta => const TaskConstMeta(
        debugName: "ZoneNowPlaying_one_line",
        argNames: ["that"],
      );

  @override
  int? zoneNowPlayingSeekPosition(
      {required ZoneNowPlaying that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta: kZoneNowPlayingSeekPositionConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZoneNowPlayingSeekPositionConstMeta => const TaskConstMeta(
        debugName: "ZoneNowPlaying_seek_position",
        argNames: ["that"],
      );

  @override
  List<String> zoneNowPlayingThreeLine(
      {required ZoneNowPlaying that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kZoneNowPlayingThreeLineConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZoneNowPlayingThreeLineConstMeta => const TaskConstMeta(
        debugName: "ZoneNowPlaying_three_line",
        argNames: ["that"],
      );

  @override
  List<String> zoneNowPlayingTwoLine(
      {required ZoneNowPlaying that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kZoneNowPlayingTwoLineConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZoneNowPlayingTwoLineConstMeta => const TaskConstMeta(
        debugName: "ZoneNowPlaying_two_line",
        argNames: ["that"],
      );

  @override
  Future<ZoneState> zoneStateFrom(
      {required RoonApiTransportState inner, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportState(
            inner, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_zone_state,
        decodeErrorData: null,
      ),
      constMeta: kZoneStateFromConstMeta,
      argValues: [inner],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kZoneStateFromConstMeta => const TaskConstMeta(
        debugName: "ZoneState_from",
        argNames: ["inner"],
      );

  @override
  Future<void> getImage(
      {required String imageKey,
      required int width,
      required int height,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(imageKey, serializer);
        sse_encode_u_32(width, serializer);
        sse_encode_u_32(height, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetImageConstMeta,
      argValues: [imageKey, width, height],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetImageConstMeta => const TaskConstMeta(
        debugName: "get_image",
        argNames: ["imageKey", "width", "height"],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> selectBrowseItem({String? itemKey, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(itemKey, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSelectBrowseItemConstMeta,
      argValues: [itemKey],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSelectBrowseItemConstMeta => const TaskConstMeta(
        debugName: "select_browse_item",
        argNames: ["itemKey"],
      );

  @override
  Future<void> selectZone({required String zoneId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(zoneId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSelectZoneConstMeta,
      argValues: [zoneId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSelectZoneConstMeta => const TaskConstMeta(
        debugName: "select_zone",
        argNames: ["zoneId"],
      );

  @override
  Future<void> startRoon(
      {required FutureOr<void> Function(RoonEvent) cb, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_roon_event_Output_unit(cb, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStartRoonConstMeta,
      argValues: [cb],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStartRoonConstMeta => const TaskConstMeta(
        debugName: "start_roon",
        argNames: ["cb"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_roon_event_Output_unit(
          FutureOr<void> Function(RoonEvent) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_roon_event(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BrowseItem => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BrowseItem => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoonZone => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoonZone => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ZoneNowPlaying => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ZoneNowPlaying => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoonApiBrowseItem => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apibrowseItem;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoonApiBrowseItem => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apibrowseItem;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoonApiTransportNowPlaying => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportNowPlaying;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoonApiTransportNowPlaying => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportNowPlaying;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoonApiTransportState => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportState;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoonApiTransportState => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportState;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RoonApiTransportZone => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportZone;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RoonApiTransportZone => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportZone;

  @protected
  BrowseItem
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowseItem.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RoonZone
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoonZone.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ZoneNowPlaying
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZoneNowPlaying.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RoonApiBrowseItem
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apibrowseItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoonApiBrowseItem.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RoonApiTransportNowPlaying
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportNowPlaying(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoonApiTransportNowPlaying.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RoonApiTransportState
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoonApiTransportState.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RoonApiTransportZone
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportZone(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoonApiTransportZone.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BrowseItem
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowseItem.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RoonZone
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoonZone.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ZoneNowPlaying
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZoneNowPlaying.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<void> Function(RoonEvent)
      dco_decode_DartFn_Inputs_roon_event_Output_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  BrowseItem
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BrowseItem.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RoonZone
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoonZone.dcoDecode(raw as List<dynamic>);
  }

  @protected
  ZoneNowPlaying
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZoneNowPlaying.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RoonApiBrowseItem
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apibrowseItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoonApiBrowseItem.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RoonApiTransportNowPlaying
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportNowPlaying(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoonApiTransportNowPlaying.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RoonApiTransportState
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportState(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoonApiTransportState.dcoDecode(raw as List<dynamic>);
  }

  @protected
  RoonApiTransportZone
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportZone(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RoonApiTransportZone.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  ZoneNowPlaying
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as ZoneNowPlaying;
  }

  @protected
  BrowseItems dco_decode_box_autoadd_browse_items(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_browse_items(raw);
  }

  @protected
  int dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  ImageKeyValue dco_decode_box_autoadd_image_key_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_image_key_value(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BrowseItems dco_decode_browse_items(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BrowseItems(
      offset: dco_decode_usize(arr[0]),
      items:
          dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
              arr[1]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  ImageKeyValue dco_decode_image_key_value(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ImageKeyValue(
      imageKey: dco_decode_String(arr[0]),
      image: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  List<BrowseItem>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<ZoneSummary> dco_decode_list_zone_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_zone_summary).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  ZoneNowPlaying?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
            raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  RoonEvent dco_decode_roon_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return RoonEvent_CoreFound(
          dco_decode_String(raw[1]),
        );
      case 1:
        return RoonEvent_CoreLost(
          dco_decode_String(raw[1]),
        );
      case 2:
        return RoonEvent_ZonesChanged(
          dco_decode_list_zone_summary(raw[1]),
        );
      case 3:
        return RoonEvent_ZoneSelected(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
              raw[1]),
        );
      case 4:
        return RoonEvent_BrowseItems(
          dco_decode_box_autoadd_browse_items(raw[1]),
        );
      case 5:
        return RoonEvent_Image(
          dco_decode_box_autoadd_image_key_value(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  ZoneState dco_decode_zone_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ZoneState.values[raw as int];
  }

  @protected
  ZoneSummary dco_decode_zone_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ZoneSummary(
      zoneId: dco_decode_String(arr[0]),
      displayName: dco_decode_String(arr[1]),
      state: dco_decode_zone_state(arr[2]),
      nowPlaying: dco_decode_opt_String(arr[3]),
      imageKey: dco_decode_opt_String(arr[4]),
    );
  }

  @protected
  BrowseItem
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BrowseItem.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoonZone
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoonZone.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZoneNowPlaying
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZoneNowPlaying.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoonApiBrowseItem
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apibrowseItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoonApiBrowseItem.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoonApiTransportNowPlaying
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportNowPlaying(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoonApiTransportNowPlaying.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoonApiTransportState
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoonApiTransportState.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoonApiTransportZone
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportZone(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoonApiTransportZone.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BrowseItem
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BrowseItem.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoonZone
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoonZone.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZoneNowPlaying
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZoneNowPlaying.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  BrowseItem
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BrowseItem.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoonZone
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoonZone.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ZoneNowPlaying
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ZoneNowPlaying.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoonApiBrowseItem
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apibrowseItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoonApiBrowseItem.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoonApiTransportNowPlaying
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportNowPlaying(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoonApiTransportNowPlaying.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoonApiTransportState
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportState(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoonApiTransportState.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RoonApiTransportZone
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportZone(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RoonApiTransportZone.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  ZoneNowPlaying
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
        deserializer));
  }

  @protected
  BrowseItems sse_decode_box_autoadd_browse_items(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_browse_items(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  ImageKeyValue sse_decode_box_autoadd_image_key_value(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_image_key_value(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  BrowseItems sse_decode_browse_items(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_offset = sse_decode_usize(deserializer);
    var var_items =
        sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
            deserializer);
    return BrowseItems(offset: var_offset, items: var_items);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  ImageKeyValue sse_decode_image_key_value(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_imageKey = sse_decode_String(deserializer);
    var var_image = sse_decode_list_prim_u_8_strict(deserializer);
    return ImageKeyValue(imageKey: var_imageKey, image: var_image);
  }

  @protected
  List<BrowseItem>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BrowseItem>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<ZoneSummary> sse_decode_list_zone_summary(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ZoneSummary>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_zone_summary(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ZoneNowPlaying?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  RoonEvent sse_decode_roon_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return RoonEvent_CoreFound(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return RoonEvent_CoreLost(var_field0);
      case 2:
        var var_field0 = sse_decode_list_zone_summary(deserializer);
        return RoonEvent_ZonesChanged(var_field0);
      case 3:
        var var_field0 =
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
                deserializer);
        return RoonEvent_ZoneSelected(var_field0);
      case 4:
        var var_field0 = sse_decode_box_autoadd_browse_items(deserializer);
        return RoonEvent_BrowseItems(var_field0);
      case 5:
        var var_field0 = sse_decode_box_autoadd_image_key_value(deserializer);
        return RoonEvent_Image(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  ZoneState sse_decode_zone_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ZoneState.values[inner];
  }

  @protected
  ZoneSummary sse_decode_zone_summary(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_zoneId = sse_decode_String(deserializer);
    var var_displayName = sse_decode_String(deserializer);
    var var_state = sse_decode_zone_state(deserializer);
    var var_nowPlaying = sse_decode_opt_String(deserializer);
    var var_imageKey = sse_decode_opt_String(deserializer);
    return ZoneSummary(
        zoneId: var_zoneId,
        displayName: var_displayName,
        state: var_state,
        nowPlaying: var_nowPlaying,
        imageKey: var_imageKey);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          BrowseItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
          RoonZone self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          ZoneNowPlaying self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apibrowseItem(
          RoonApiBrowseItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportNowPlaying(
          RoonApiTransportNowPlaying self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportState(
          RoonApiTransportState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportZone(
          RoonApiTransportZone self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          BrowseItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
          RoonZone self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          ZoneNowPlaying self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_roon_event_Output_unit(
      FutureOr<void> Function(RoonEvent) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_roon_event_Output_unit(self), serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        PlatformPointerUtil.ptrToInt(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          BrowseItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
          RoonZone self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          ZoneNowPlaying self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apibrowseItem(
          RoonApiBrowseItem self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportNowPlaying(
          RoonApiTransportNowPlaying self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportState(
          RoonApiTransportState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockroon_apitransportZone(
          RoonApiTransportZone self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          ZoneNowPlaying self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_browse_items(
      BrowseItems self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_browse_items(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_image_key_value(
      ImageKeyValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_image_key_value(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_browse_items(BrowseItems self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.offset, serializer);
    sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
        self.items, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_image_key_value(
      ImageKeyValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.imageKey, serializer);
    sse_encode_list_prim_u_8_strict(self.image, serializer);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          List<BrowseItem> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBrowseItem(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_zone_summary(
      List<ZoneSummary> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_zone_summary(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          ZoneNowPlaying? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockZoneNowPlaying(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_roon_event(RoonEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case RoonEvent_CoreFound(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case RoonEvent_CoreLost(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case RoonEvent_ZonesChanged(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_list_zone_summary(field0, serializer);
      case RoonEvent_ZoneSelected(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockRoonZone(
            field0, serializer);
      case RoonEvent_BrowseItems(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_box_autoadd_browse_items(field0, serializer);
      case RoonEvent_Image(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_box_autoadd_image_key_value(field0, serializer);
    }
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_zone_state(ZoneState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_zone_summary(ZoneSummary self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.zoneId, serializer);
    sse_encode_String(self.displayName, serializer);
    sse_encode_zone_state(self.state, serializer);
    sse_encode_opt_String(self.nowPlaying, serializer);
    sse_encode_opt_String(self.imageKey, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
