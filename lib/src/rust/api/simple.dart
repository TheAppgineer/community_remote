// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.34.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'roon_browse_mirror.dart';
import 'roon_transport_mirror.dart';
part 'simple.freezed.dart';

// The type `InternalState` is not used by any `pub` functions, thus it is ignored.

Future<String> startRoon(
        {required String supportPath,
        required FutureOr<void> Function(RoonEvent) cb,
        dynamic hint}) =>
    RustLib.instance.api
        .crateApiSimpleStartRoon(supportPath: supportPath, cb: cb, hint: hint);

Future<void> setServerProperties(
        {required String ip, String? port, dynamic hint}) =>
    RustLib.instance.api
        .crateApiSimpleSetServerProperties(ip: ip, port: port, hint: hint);

Future<void> selectZone({required String zoneId, dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleSelectZone(zoneId: zoneId, hint: hint);

Future<void> getImage({required String imageKey, dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleGetImage(imageKey: imageKey, hint: hint);

Future<void> browse(
        {required int category, required int sessionId, dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleBrowse(
        category: category, sessionId: sessionId, hint: hint);

Future<void> browseWithInput(
        {required int category,
        required int sessionId,
        String? input,
        dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleBrowseWithInput(
        category: category, sessionId: sessionId, input: input, hint: hint);

Future<void> browseNextPage({dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleBrowseNextPage(hint: hint);

Future<void> browseBack({required int sessionId, dynamic hint}) =>
    RustLib.instance.api
        .crateApiSimpleBrowseBack(sessionId: sessionId, hint: hint);

Future<void> searchArtist(
        {required int sessionId, required String artist, dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleSearchArtist(
        sessionId: sessionId, artist: artist, hint: hint);

Future<void> queryProfile({required int sessionId, dynamic hint}) =>
    RustLib.instance.api
        .crateApiSimpleQueryProfile(sessionId: sessionId, hint: hint);

Future<void> selectBrowseItem(
        {required int sessionId, required BrowseItem item, dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleSelectBrowseItem(
        sessionId: sessionId, item: item, hint: hint);

Future<void> selectQueueItem({required int queueItemId, dynamic hint}) =>
    RustLib.instance.api
        .crateApiSimpleSelectQueueItem(queueItemId: queueItemId, hint: hint);

Future<void> pauseAfterQueueItems(
        {required List<int> queueItemIds, dynamic hint}) =>
    RustLib.instance.api.crateApiSimplePauseAfterQueueItems(
        queueItemIds: queueItemIds, hint: hint);

Future<void> saveSettings({required String settings, dynamic hint}) =>
    RustLib.instance.api
        .crateApiSimpleSaveSettings(settings: settings, hint: hint);

Future<void> control({required Control control, dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleControl(control: control, hint: hint);

Future<void> controlByZoneId(
        {required String zoneId, required Control control, dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleControlByZoneId(
        zoneId: zoneId, control: control, hint: hint);

Future<void> pauseAll({dynamic hint}) =>
    RustLib.instance.api.crateApiSimplePauseAll(hint: hint);

Future<void> pauseOnTrackEnd({dynamic hint}) =>
    RustLib.instance.api.crateApiSimplePauseOnTrackEnd(hint: hint);

Future<void> mute(
        {required String outputId, required Mute how, dynamic hint}) =>
    RustLib.instance.api
        .crateApiSimpleMute(outputId: outputId, how: how, hint: hint);

Future<void> muteAll({dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleMuteAll(hint: hint);

Future<void> muteZone({dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleMuteZone(hint: hint);

Future<void> changeVolume(
        {required String outputId,
        required ChangeMode how,
        required int value,
        dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleChangeVolume(
        outputId: outputId, how: how, value: value, hint: hint);

Future<void> changeZoneVolume(
        {required ChangeMode how, required int value, dynamic hint}) =>
    RustLib.instance.api
        .crateApiSimpleChangeZoneVolume(how: how, value: value, hint: hint);

Future<void> standby({required String outputId, dynamic hint}) =>
    RustLib.instance.api.crateApiSimpleStandby(outputId: outputId, hint: hint);

Future<void> groupOutputs({required List<String> outputIds, dynamic hint}) =>
    RustLib.instance.api
        .crateApiSimpleGroupOutputs(outputIds: outputIds, hint: hint);

class BrowseItems {
  final BrowseList list;
  final int offset;
  final List<BrowseItem> items;

  const BrowseItems({
    required this.list,
    required this.offset,
    required this.items,
  });

  @override
  int get hashCode => list.hashCode ^ offset.hashCode ^ items.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BrowseItems &&
          runtimeType == other.runtimeType &&
          list == other.list &&
          offset == other.offset &&
          items == other.items;
}

class ImageKeyValue {
  final String imageKey;
  final Uint8List image;

  const ImageKeyValue({
    required this.imageKey,
    required this.image,
  });

  @override
  int get hashCode => imageKey.hashCode ^ image.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ImageKeyValue &&
          runtimeType == other.runtimeType &&
          imageKey == other.imageKey &&
          image == other.image;
}

@freezed
sealed class RoonEvent with _$RoonEvent {
  const RoonEvent._();

  const factory RoonEvent.coreFound(
    String field0,
  ) = RoonEvent_CoreFound;
  const factory RoonEvent.coreLost(
    String field0,
  ) = RoonEvent_CoreLost;
  const factory RoonEvent.zonesChanged(
    List<ZoneSummary> field0,
  ) = RoonEvent_ZonesChanged;
  const factory RoonEvent.zoneChanged([
    Zone? field0,
  ]) = RoonEvent_ZoneChanged;
  const factory RoonEvent.zoneSeek(
    ZoneSeek field0,
  ) = RoonEvent_ZoneSeek;
  const factory RoonEvent.outputsChanged(
    Map<String, String> field0,
  ) = RoonEvent_OutputsChanged;
  const factory RoonEvent.browseItems(
    BrowseItems field0,
  ) = RoonEvent_BrowseItems;
  const factory RoonEvent.browseActions(
    List<BrowseItem> field0,
  ) = RoonEvent_BrowseActions;
  const factory RoonEvent.browseReset() = RoonEvent_BrowseReset;
  const factory RoonEvent.profile(
    String field0,
  ) = RoonEvent_Profile;
  const factory RoonEvent.queueItems(
    List<QueueItem> field0,
  ) = RoonEvent_QueueItems;
  const factory RoonEvent.pauseOnTrackEnd(
    bool field0,
  ) = RoonEvent_PauseOnTrackEnd;
  const factory RoonEvent.image(
    ImageKeyValue field0,
  ) = RoonEvent_Image;
  const factory RoonEvent.settingsSaved() = RoonEvent_SettingsSaved;
}

class ZoneSummary {
  final String zoneId;
  final List<String> outputIds;
  final String displayName;
  final PlayState state;
  final String? nowPlaying;
  final String? imageKey;

  const ZoneSummary({
    required this.zoneId,
    required this.outputIds,
    required this.displayName,
    required this.state,
    this.nowPlaying,
    this.imageKey,
  });

  @override
  int get hashCode =>
      zoneId.hashCode ^
      outputIds.hashCode ^
      displayName.hashCode ^
      state.hashCode ^
      nowPlaying.hashCode ^
      imageKey.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ZoneSummary &&
          runtimeType == other.runtimeType &&
          zoneId == other.zoneId &&
          outputIds == other.outputIds &&
          displayName == other.displayName &&
          state == other.state &&
          nowPlaying == other.nowPlaying &&
          imageKey == other.imageKey;
}
