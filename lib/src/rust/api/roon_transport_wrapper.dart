// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.25.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<RoonZone>>
@sealed
class RoonZone extends RustOpaque {
  RoonZone.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  RoonZone.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RoonZone,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RoonZone,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RoonZonePtr,
  );

  String get displayName => RustLib.instance.api.roonZoneDisplayName(
        that: this,
      );

  static Future<RoonZone> newRoonZone(
          {required RoonApiTransportZone inner, dynamic hint}) =>
      RustLib.instance.api.roonZoneNew(inner: inner, hint: hint);

  ZoneNowPlaying? get nowPlaying => RustLib.instance.api.roonZoneNowPlaying(
        that: this,
      );

  ZoneState get state => RustLib.instance.api.roonZoneState(
        that: this,
      );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<ZoneNowPlaying>>
@sealed
class ZoneNowPlaying extends RustOpaque {
  ZoneNowPlaying.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ZoneNowPlaying.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ZoneNowPlaying,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ZoneNowPlaying,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ZoneNowPlayingPtr,
  );

  List<String>? get artistImageKey =>
      RustLib.instance.api.zoneNowPlayingArtistImageKey(
        that: this,
      );

  String? get imageKey => RustLib.instance.api.zoneNowPlayingImageKey(
        that: this,
      );

  int? get length => RustLib.instance.api.zoneNowPlayingLength(
        that: this,
      );

  static Future<ZoneNowPlaying> newZoneNowPlaying(
          {required RoonApiTransportNowPlaying inner, dynamic hint}) =>
      RustLib.instance.api.zoneNowPlayingNew(inner: inner, hint: hint);

  String get oneLine => RustLib.instance.api.zoneNowPlayingOneLine(
        that: this,
      );

  int? get seekPosition => RustLib.instance.api.zoneNowPlayingSeekPosition(
        that: this,
      );

  List<String> get threeLine => RustLib.instance.api.zoneNowPlayingThreeLine(
        that: this,
      );

  List<String> get twoLine => RustLib.instance.api.zoneNowPlayingTwoLine(
        that: this,
      );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<roon_api :: transport :: NowPlaying>>
@sealed
class RoonApiTransportNowPlaying extends RustOpaque {
  RoonApiTransportNowPlaying.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  RoonApiTransportNowPlaying.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_RoonApiTransportNowPlaying,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_RoonApiTransportNowPlaying,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_RoonApiTransportNowPlayingPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<roon_api :: transport :: State>>
@sealed
class RoonApiTransportState extends RustOpaque {
  RoonApiTransportState.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  RoonApiTransportState.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_RoonApiTransportState,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_RoonApiTransportState,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_RoonApiTransportStatePtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<roon_api :: transport :: Zone>>
@sealed
class RoonApiTransportZone extends RustOpaque {
  RoonApiTransportZone.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  RoonApiTransportZone.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_RoonApiTransportZone,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_RoonApiTransportZone,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_RoonApiTransportZonePtr,
  );
}

enum ZoneState {
  playing,
  loading,
  paused,
  stopped,
}
